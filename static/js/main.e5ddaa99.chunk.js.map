{"version":3,"sources":["mechanics/directions.ts","mechanics/getRelevantTiles.ts","mechanics/isLevelCleared.ts","mechanics/isMoveValid.ts","mechanics/pushObjects.ts","state/ducks/levels/types.ts","levels.ts","state/ducks/levels/actions.ts","state/ducks/levels/selectors.ts","state/ducks/levels/reducer.ts","state/ducks/game/types.ts","state/ducks/levels/index.ts","state/ducks/game/actions.ts","state/ducks/game/reducer.ts","state/ducks/game/selectors.ts","state/ducks/game/index.ts","state/ducks/index.ts","state/localStorage.ts","state/store.ts","components/BackButton.tsx","components/Screen.tsx","components/screens/Settings.tsx","components/screens/Menu.tsx","components/screens/LevelSelection.tsx","utils/hooks/useEffectOnce.ts","utils/hooks/useMinimalRotation.ts","utils/hooks/usePrevious.ts","utils/hooks/useSimpleMovementAnimation.ts","components/webgl/CameraControls.tsx","components/webgl/CardboardBox.tsx","components/webgl/GroundElevation.tsx","components/webgl/Robot.tsx","components/webgl/TargetTile.tsx","components/webgl/Map.tsx","components/webgl/MyCanvas.tsx","components/screens/Level/Controls.tsx","components/screens/Level/LevelClearedDialog.tsx","components/screens/Level/RestartButton.tsx","components/screens/Level/Level.tsx","components/screens/Level/index.ts","theme.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","rightAngle","Math","PI","DIRECTIONS","NORTH","dx","dy","angle","WEST","SOUTH","EAST","rightOf","leftOf","move","point","direction","x","y","rotateRight","rotateLeft","oppositeDirection","getTile","tiles","undefined","getRelevantTiles","robotPosition","moveDirection","targetPosition","pushedObjectsPosition","isLevelCleared","levelMap","hasBox","tile","objects","some","o","type","targets","column","targetX","targetY","isValidTile","height","isMoveValid","currentTile","targetTile","pushedObectsTile","length","slice","pushObjects","from","robotX","robotY","fromX","fromY","toX","toY","robotTile","map","fromTile","ActionTypes","levels","width","robot","position","getLevelNames","_","index","getLevelMap","level","robotZ","key","createUniqueKey","obj","addKeys","initialX","initialY","initialZ","join","selectLevel","SELECT_LEVEL","payload","clearLevel","CLEAR_LEVEL","getSelectedLevel","state","selectedLevel","isUnlocked","unlockedLevels","INITIAL_STATE","parseLevel","path","startsWith","parseInt","substr","levelsReducer","reducer","action","LOCATION_CHANGE","location","pathname","loop","Cmd","gameActions","startLevel","START_LEVEL","finishLevel","FINISH_LEVEL","moveForward","MOVE_FORWARD","moveBackward","MOVE_BACKWARD","turnRight","TURN_RIGHT","turnLeft","TURN_LEFT","MOVE","finished","canMove","relevantTiles","getRobotPosition","assertMapDefined","getRobotDirection","getRobotKey","getMapDimensions","getTilesInfo","Set","tilesInfo","hasTarget","has","push","getMovableObjectsInfo","allObjects","tileObjects","Error","newState","getNeighbor","levelsActions","createRootReducer","history","combineReducers","game","router","connectRouter","setupStatePersistence","store","slices","previousState","Map","Object","entries","getState","subscribe","changedSlices","filter","sliceName","get","forEach","sliceState","serializedSlice","JSON","stringify","localStorage","setItem","err","console","warn","saveSliceState","PERSISTENT_SLICES","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","connector","connect","dispatch","goBack","Button","icon","Previous","label","onClick","H1","styled","h1","Screen","title","children","Box","gap","align","Settings","startGame","openSettings","Play","SettingsOption","levelsSelectors","levelName","Unlock","Lock","disabled","useEffectOnce","effect","useEffect","useMinimalRotation","currentDirection","ref","useRef","previousAngle","current","currentAngle","fullRotation","directionDiff","minimizeRotation","usePrevious","currentValue","useSimpleMovementAnimation","currentProps","previousProps","useSpring","to","next","a","config","duration","extend","OrbitControls","initialPosition","mapDimensions","gameSelectors","n","max","useThree","camera","gl","controls","set","update","args","domElement","maxPolarAngle","enablePan","CardboardBox","props","mesh","castShadow","receiveShadow","attach","color","GroundElevation","actions","onKeyPress","event","addEventListener","removeEventListener","zRotation","rotation","TargetTile","movableObjectsInfo","robotKey","xSize","ySize","MyCanvas","Consumer","shadowMap","style","backgroundColor","top","left","process","intensity","Color","penumbra","decay","shadow-mapSize-width","shadow-mapSize-height","Wrapper","div","IconButton","plain","margin","LinkUp","RotateLeft","LinkDown","RotateRight","DialogWrapper","goToLevel","goToLevelSelection","nextLevel","pad","restart","Refresh","Level","match","params","theme","global","colors","dark","brand","control","text","background","font","family","persistedState","serializedSliceState","getItem","parse","loadPersistedState","createBrowserHistory","basename","enhancer","applyMiddleware","routerMiddleware","install","enhancedCreateStore","createStore","configureStore","App","Grommet","full","Main","exact","component","Menu","LevelSelection","render","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e5ddaa99.chunk.js","sourcesContent":["export type Point2D = [number, number];\n\nenum Direction {\n  NORTH = 'NORTH',\n  EAST = 'EAST',\n  SOUTH = 'SOUTH',\n  WEST = 'WEST'\n}\n\nconst rightAngle = Math.PI / 2;\n\nconst DIRECTIONS = {\n  NORTH: { dx: 0, dy: 1, angle: 0 },\n  WEST: { dx: -1, dy: 0, angle: rightAngle },\n  SOUTH: { dx: 0, dy: -1, angle: 2 * rightAngle },\n  EAST: { dx: 1, dy: 0, angle: 3 * rightAngle }\n} as const;\n\nconst rightOf: Record<Direction, Direction> = {\n  [Direction.NORTH]: Direction.EAST,\n  [Direction.EAST]: Direction.SOUTH,\n  [Direction.SOUTH]: Direction.WEST,\n  [Direction.WEST]: Direction.NORTH\n};\n\nconst leftOf: Record<Direction, Direction> = {\n  [Direction.NORTH]: Direction.WEST,\n  [Direction.WEST]: Direction.SOUTH,\n  [Direction.SOUTH]: Direction.EAST,\n  [Direction.EAST]: Direction.NORTH\n};\n\nfunction move(point: Point2D, direction: Direction): Point2D {\n  const [x, y] = point;\n  const { dx, dy } = DIRECTIONS[direction];\n\n  return [x + dx, y + dy];\n}\n\nfunction rotateRight(direction: Direction): Direction {\n  return rightOf[direction];\n}\n\nfunction rotateLeft(direction: Direction): Direction {\n  return leftOf[direction];\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n  return rightOf[rightOf[direction]];\n}\n\nfunction directionToAngle(direction: Direction): number {\n  return DIRECTIONS[direction].angle;\n}\n\n/**\n * Finds the angle that minimizes the rotation needed to go from one angle to a given direction.\n *\n * @param previousAngle - an angle in radians (may be negative or well over 2 * PI)\n * @param currentDirection - an angle (in radians) indicating the direction of the result, within a circumference\n * @return the closest angle to {@param previousAngle}, which points in the same direction as the angle\n *    {@param currentDirection}\n */\nfunction minimizeRotation(previousAngle: number, currentDirection: number): number {\n  const fullRotation = 2 * Math.PI;\n  const directionDiff = (currentDirection - previousAngle) % fullRotation;\n\n  if (directionDiff > Math.PI) {\n    return previousAngle + directionDiff - fullRotation;\n  } else if (directionDiff < -Math.PI) {\n    return previousAngle + directionDiff + fullRotation;\n  }\n  return previousAngle + directionDiff;\n}\n\nexport {\n  Direction,\n  move,\n  rotateRight,\n  rotateLeft,\n  oppositeDirection,\n  directionToAngle,\n  minimizeRotation\n};\n","import { Maybe } from '../utils/types';\nimport { Direction, move, Point2D } from './directions';\nimport { Tile } from './types';\n\n\nfunction getRelevantTiles(tiles: Tile[][], robotPosition: Point2D, moveDirection: Direction) {\n  const targetPosition = move(robotPosition, moveDirection);\n  const pushedObjectsPosition = move(targetPosition, moveDirection);\n\n  return [\n    getTile(tiles, robotPosition),\n    getTile(tiles, targetPosition),\n    getTile(tiles, pushedObjectsPosition)\n  ] as [Tile, Maybe<Tile>, Maybe<Tile>];\n}\n\nfunction getTile(tiles: Tile[][], [x, y]: Point2D): Maybe<Tile> {\n  return tiles[x] ? tiles[x][y] : undefined;\n}\n\n\nexport default getRelevantTiles;\n","import { LevelMap, Tile } from './types';\n\n\nfunction isLevelCleared(levelMap: LevelMap): boolean {\n  const hasBox = (tile: Tile) => tile.objects.some(o => o.type === 'box');\n\n  // checks for a target without a box\n  if (levelMap.targets.some(([x, y]) => !hasBox(levelMap.tiles[x][y]))) {\n    return false;\n  }\n\n  // checks for a box without a target\n  return !levelMap.tiles.some((column, x) => (\n    column.some((tile, y) => (\n      hasBox(tile) && !levelMap.targets.some(([targetX, targetY]) => targetX === x && targetY === y)\n    ))\n  ));\n}\n\n\nexport default isLevelCleared;\n","import { Maybe } from '../utils/types';\nimport { Tile } from './types';\n\n\nfunction isMoveValid(currentTile: Tile, targetTile: Maybe<Tile>, pushedObectsTile: Maybe<Tile>): boolean {\n  if (!isValidTile(targetTile)) {\n    // target is beyond the edge or is a hole\n    return false;\n  } else if (targetTile.height > currentTile.height + currentTile.objects.length) {\n    // trying to move toward a wall\n    return false;\n  }\n\n  const height = currentTile.height + currentTile.objects.length;\n  const pushedObjects = targetTile.objects.slice(height - targetTile.height);\n\n  if (pushedObjects.length > 0) {\n    if (!isValidTile(pushedObectsTile)) {\n      // trying to push objects into the void\n      return false;\n    } else if (pushedObectsTile.height + pushedObectsTile.objects.length > height) {\n      // trying to push objects into a wall/object\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isValidTile(tile: Maybe<Tile>): tile is Tile {\n  return tile !== undefined && tile.height > 0;\n}\n\n\nexport default isMoveValid;\n","import { Direction, move, Point2D } from './directions';\nimport { Tile } from './types';\n\n\nfunction pushObjects(tiles: Tile[][], robotPosition: Point2D, direction: Direction): Tile[][] {\n  const from = move(robotPosition, direction);\n  const [robotX, robotY] = robotPosition;\n  const [fromX, fromY] = from;\n  const [toX, toY] = move(from, direction);\n  const robotTile = tiles[robotX][robotY];\n  const height = robotTile.height + robotTile.objects.length;\n\n  return tiles.map((column, x) => (\n    column.map((tile, y) => {\n      if (x === fromX && y === fromY) {\n        return {\n          ...tile,\n          objects: tile.objects.slice(0, height - tile.height)\n        };\n      } else if (x === toX && y === toY) {\n        const fromTile = tiles[fromX][fromY];\n        return {\n          ...tile,\n          objects: [...tile.objects, ...fromTile.objects.slice(height - fromTile.height)]\n        };\n      }\n      return tile;\n    })\n  ))\n}\n\n\nexport default pushObjects;\n","import { DeepReadonly } from 'utility-types';\n\n\nexport enum ActionTypes {\n  SELECT_LEVEL = 'levels/SELECT_LEVEL',\n  CLEAR_LEVEL = 'levels/CLEAR_LEVEL',\n}\n\nexport type State = DeepReadonly<{\n  readonly unlockedLevels: number;\n  readonly selectedLevel?: number;\n}>;\n","import { LevelMap } from './mechanics/types';\nimport { Maybe } from './utils/types';\nimport { Direction } from './mechanics/directions';\n\n\nconst levels: LevelMap[] = [\n  // 1 move\n  {\n    height: 3,\n    width: 3,\n    targets: [[1, 2]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [{ type: 'box' }] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [1, 0],\n      direction: Direction.NORTH\n    }\n  },\n  // 2nd 2D\n  {\n    height: 4,\n    width: 5,\n    targets: [[0, 1], [4, 0]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [{ type: 'box' }] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n  },\n  // 1st 3D\n  {\n    height: 5,\n    width: 5,\n    targets: [[0, 0], [4, 4]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [{ type: 'box' }, { type: 'box' }] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [2, 2],\n      direction: Direction.NORTH\n    }\n  },\n  // 2nd 3D\n  {\n    height: 3,\n    width: 5,\n    targets: [[0, 2], [4, 2]],\n    tiles: [\n      [{ height: 1, objects: [] },{ height: 1, objects: [] },{ height: 1, objects: []}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: [{ type: 'box' }]}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: []}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: []}],\n      [{ height: 1, objects: [] },{ height: 1, objects: [] },{ height: 1, objects: []}]\n    ],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n },\n  // 3rd 3D\n  {\n    height: 6,\n    width: 5,\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 2, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 2, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    targets: [[0, 2], [0, 3], [4, 0], [4, 5]],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n  }\n];\n\n/**\n * Lists the names of all levels.\n * (levels may have have meaningful names later on)\n */\nfunction getLevelNames(): string[] {\n  return levels.map((_, index) => `Level ${index + 1}`);\n}\n\n/**\n * Returns a copy of a level's map, given its index.\n */\nfunction getLevelMap(level: number): Maybe<LevelMap> {\n  const map = levels[level];\n\n  if (map) {\n    return addKeys(level, map);\n  }\n  return undefined;\n}\n\n/**\n * Returns a copy of a map, adding unique keys to robot and movable objects.\n */\nfunction addKeys(level: number, map: LevelMap): LevelMap {\n  const [robotX, robotY] = map.robot.position;\n  const robotTile = map.tiles[robotX][robotY];\n  const robotZ = robotTile.height + robotTile.objects.length;\n\n  return {\n    ...map,\n    robot: {\n      ...map.robot,\n      key: createUniqueKey(level, robotX, robotY, robotZ)\n    },\n    tiles: map.tiles.map((column, x) => (\n      column.map(({ height, objects }, y) => ({\n        height,\n        objects: objects.map((obj, index) => ({\n          ...obj,\n          key: createUniqueKey(level, x, y, height + 1 + index)\n        }))\n      }))\n    ))\n  };\n}\n\n/**\n * Creates a deterministic unique key for an object, based on its level and initial position.\n */\nfunction createUniqueKey(level: number, initialX: number, initialY: number, initialZ: number): string {\n  return [level, initialX, initialY, initialZ].join('-');\n}\n\n\nexport {\n  getLevelNames,\n  getLevelMap\n};\n","import { Action } from '../../../utils/types';\nimport { ActionTypes } from './types';\n\n\nexport type LevelsAction = (\n  Action<ActionTypes.SELECT_LEVEL, { level: number }>\n  | Action<ActionTypes.CLEAR_LEVEL>\n);\n\nfunction selectLevel(level: number): LevelsAction {\n  return {\n    type: ActionTypes.SELECT_LEVEL,\n    payload: {\n      level\n    }\n  };\n}\n\nfunction clearLevel(): LevelsAction {\n  return { type: ActionTypes.CLEAR_LEVEL };\n}\n\n\nexport {\n  selectLevel,\n  clearLevel\n};\n","import { State } from './types';\n\n\nfunction getSelectedLevel(state: State) {\n  return state.selectedLevel;\n}\n\nfunction isUnlocked(state: State, level: number) {\n  return level < state.unlockedLevels;\n}\n\n\nexport {\n  getSelectedLevel,\n  isUnlocked\n};\n","import { LOCATION_CHANGE, LocationChangeAction } from 'connected-react-router';\nimport { Cmd, loop } from 'redux-loop';\nimport { getLevelMap } from '../../../levels';\nimport { assertNever, Maybe, Reducer } from '../../../utils/types';\nimport { gameActions } from '../game';\nimport { LevelsAction, selectLevel } from './actions';\nimport { isUnlocked } from './selectors';\nimport { ActionTypes, State } from './types';\n\n\nconst INITIAL_STATE: State = {\n  unlockedLevels: 1\n};\n\ntype HandledAction = LevelsAction | LocationChangeAction;\ntype TriggeredAction = LevelsAction | ReturnType<typeof gameActions.startLevel>;\n\nconst levelsReducer: Reducer<State, HandledAction, TriggeredAction> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case LOCATION_CHANGE: {\n      const level = parseLevel(action.payload.location.pathname);\n\n      if (level !== undefined) {\n        return loop(\n          state,\n          Cmd.action(selectLevel(level))\n        );\n      }\n      return state;\n    }\n    case ActionTypes.SELECT_LEVEL: {\n      const { level } = action.payload;\n      const levelMap = getLevelMap(level);\n\n      if (levelMap && isUnlocked(state, level)) {\n        return loop(\n          { ...state, selectedLevel: level },\n          Cmd.action(gameActions.startLevel(levelMap))\n        );\n      }\n      return state;\n    }\n    case ActionTypes.CLEAR_LEVEL:\n      return {\n        unlockedLevels: state.unlockedLevels + (state.selectedLevel === state.unlockedLevels - 1 ? 1 : 0)\n      };\n    default:\n      assertNever(action);\n      return state;\n  }\n};\n\nfunction parseLevel(path: string): Maybe<number> {\n  const prefix = '/level/';\n\n  if (!path.startsWith(prefix)) {\n    return undefined;\n  }\n  return parseInt(path.substr(prefix.length));\n}\n\n\nexport default levelsReducer;\n","import { LevelMap } from '../../../mechanics/types';\n\n\nexport enum ActionTypes {\n  START_LEVEL = 'game/START_LEVEL',\n  FINISH_LEVEL = 'game/FINISH_LEVEL',\n  MOVE = 'game/MOVE',\n  MOVE_FORWARD = 'game/MOVE_FORWARD',\n  MOVE_BACKWARD = 'game/MOVE_BACKWARD',\n  TURN_RIGHT = 'game/TURN_RIGHT',\n  TURN_LEFT = 'game/TURN_LEFT'\n}\n\nexport interface State {\n  finished: boolean;\n  map?: LevelMap;\n}\n","import reducer from './reducer';\nimport * as levelsActions from './actions';\nimport * as levelsSelectors from './selectors';\n\n\nexport {\n  levelsActions,\n  levelsSelectors\n};\n\n\nexport default reducer;\n","import { Direction } from '../../../mechanics/directions';\nimport { LevelMap } from '../../../mechanics/types';\nimport { Action } from '../../../utils/types';\nimport { ActionTypes } from './types';\n\n\nexport type GameAction = (\n  Action<ActionTypes.START_LEVEL, { map: LevelMap }>\n  | Action<ActionTypes.FINISH_LEVEL>\n  | Action<ActionTypes.MOVE_FORWARD>\n  | Action<ActionTypes.MOVE_BACKWARD>\n  | Action<ActionTypes.TURN_LEFT>\n  | Action<ActionTypes.TURN_RIGHT>\n  | Action<ActionTypes.MOVE, Direction>\n);\n\nfunction startLevel(map: LevelMap): GameAction {\n  return {\n    type: ActionTypes.START_LEVEL,\n    payload: {\n      map\n    }\n  };\n}\n\nfunction finishLevel(): GameAction {\n  return { type: ActionTypes.FINISH_LEVEL };\n}\n\nfunction moveForward(): GameAction {\n  return { type: ActionTypes.MOVE_FORWARD };\n}\n\nfunction moveBackward(): GameAction {\n  return { type: ActionTypes.MOVE_BACKWARD };\n}\n\nfunction turnRight(): GameAction {\n  return { type: ActionTypes.TURN_RIGHT };\n}\n\nfunction turnLeft(): GameAction {\n  return { type: ActionTypes.TURN_LEFT };\n}\n\nfunction move(direction: Direction): GameAction {\n  return {\n    type: ActionTypes.MOVE,\n    payload: direction\n  };\n}\n\n\nexport {\n  startLevel,\n  finishLevel,\n  moveForward,\n  moveBackward,\n  turnRight,\n  turnLeft,\n  move\n};\n","import { Cmd, loop } from 'redux-loop';\nimport {\n  Direction,\n  move as getNeighbor,\n  oppositeDirection,\n  rotateLeft,\n  rotateRight\n} from '../../../mechanics/directions';\nimport getRelevantTiles from '../../../mechanics/getRelevantTiles';\nimport isLevelCleared from '../../../mechanics/isLevelCleared';\nimport isMoveValid from '../../../mechanics/isMoveValid';\nimport pushObjects from '../../../mechanics/pushObjects';\nimport { LevelMap } from '../../../mechanics/types';\nimport { assertNever, Reducer } from '../../../utils/types';\nimport { levelsActions } from '../levels';\nimport { finishLevel, GameAction, move } from './actions';\nimport { ActionTypes, State } from './types';\n\n\nconst INITIAL_STATE: State = {\n  finished: false\n};\n\ntype TriggeredAction = GameAction | ReturnType<typeof levelsActions.clearLevel>;\n\nconst gameReducer: Reducer<State, GameAction, TriggeredAction> = (state = INITIAL_STATE, action) => {\n  if (action.type === ActionTypes.START_LEVEL) {\n    const { map } = action.payload;\n\n    return {\n      finished: false,\n      map\n    };\n  } else if (state.map) {\n    switch (action.type) {\n      case ActionTypes.MOVE_FORWARD: {\n        const direction = state.map.robot.direction;\n\n        if (canMove(state.map, direction)) {\n          return loop(state, Cmd.action(move(direction)));\n        }\n        return state;\n      }\n      case ActionTypes.MOVE_BACKWARD: {\n        const direction = oppositeDirection(state.map.robot.direction);\n\n        if (canMove(state.map, direction)) {\n          return loop(state, Cmd.action(move(direction)));\n        }\n        return state;\n      }\n      case ActionTypes.TURN_RIGHT:\n        return {\n          ...state,\n          map: {\n            ...state.map,\n            robot: {\n              ...state.map.robot,\n              direction: rotateRight(state.map.robot.direction)\n            }\n          }\n        };\n      case ActionTypes.TURN_LEFT:\n        return {\n          ...state,\n          map: {\n            ...state.map,\n            robot: {\n              ...state.map.robot,\n              direction: rotateLeft(state.map.robot.direction)\n            }\n          }\n        };\n      case ActionTypes.MOVE:\n        const newState = {\n          ...state,\n          map: {\n            ...state.map,\n            tiles: pushObjects(state.map.tiles, state.map.robot.position, action.payload),\n            robot: {\n              ...state.map.robot,\n              position: getNeighbor(state.map.robot.position, action.payload),\n            }\n          }\n        };\n        if (isLevelCleared(newState.map)) {\n          return loop(newState, Cmd.action(finishLevel()));\n        }\n        return newState;\n      case ActionTypes.FINISH_LEVEL:\n        return loop(\n          { ...state, finished: true },\n          Cmd.action(levelsActions.clearLevel())\n        );\n      default:\n        assertNever(action);\n        return state;\n    }\n  } else {\n    return state;\n  }\n};\n\nfunction canMove(state: LevelMap, direction: Direction) {\n  const relevantTiles = getRelevantTiles(state.tiles, state.robot.position, direction);\n  return isMoveValid(...relevantTiles);\n}\n\n\nexport default gameReducer;\nexport { INITIAL_STATE };\n","import { Direction } from '../../../mechanics/directions';\nimport { LevelMap, MovableObject } from '../../../mechanics/types';\nimport { State } from './types';\n\n\ninterface TileStaticInfo {\n  x: number;\n  y: number;\n  height: number;\n  hasTarget: boolean;\n}\n\ninterface MovableObjectsInfo extends MovableObject {\n  position: [number, number, number];\n}\n\n\nfunction getRobotPosition(state: State): [number, number, number] {\n  assertMapDefined(state);\n\n  const [x, y] = state.map.robot.position;\n  const z = state.map.tiles[x][y].height + state.map.tiles[x][y].objects.length + 1;\n\n  return [x, y, z];\n}\n\nfunction getRobotDirection(state: State): Direction {\n  assertMapDefined(state);\n  return state.map.robot.direction;\n}\n\nfunction getRobotKey(state: State): string {\n  assertMapDefined(state);\n  return state.map.robot.key!;\n}\n\nfunction getMapDimensions(state: State): [number, number] {\n  assertMapDefined(state);\n  return [state.map.width, state.map.height];\n}\n\n/**\n * Lists the static info about all map tiles.\n */\nfunction getTilesInfo(state: State): TileStaticInfo[] {\n  assertMapDefined(state);\n\n  const { map: { tiles }} = state;\n  const targets = new Set<string>(state.map.targets.map(point => point.join('-')));\n  const tilesInfo = [];\n\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const height = tiles[x][y].height;\n      const hasTarget = targets.has(x + '-' + y);\n\n      tilesInfo.push({ x, y, height, hasTarget });\n    }\n  }\n  return tilesInfo;\n}\n\n/**\n * Lists all map objects that can be moved (pushed).\n */\nfunction getMovableObjectsInfo(state: State): MovableObjectsInfo[] {\n  assertMapDefined(state);\n\n  const { map: { tiles }} = state;\n  const allObjects = [];\n\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const tileObjects = tiles[x][y].objects.map((obj, index) => {\n        return {\n          ...obj,\n          position: [x, y, tiles[x][y].height + index + 1]\n        } as MovableObjectsInfo;\n      });\n\n      allObjects.push(...tileObjects);\n    }\n  }\n  return allObjects;\n}\n\nfunction assertMapDefined(state: State): asserts state is State & { map: LevelMap } {\n  if (!state.map) {\n    throw Error('No map defined.');\n  }\n}\n\n\nexport {\n  getRobotPosition,\n  getRobotDirection,\n  getRobotKey,\n  getMapDimensions,\n  getTilesInfo,\n  getMovableObjectsInfo\n};\n","import reducer from './reducer';\nimport * as gameActions from './actions';\nimport * as gameSelectors from './selectors';\n\n\nexport {\n  gameActions,\n  gameSelectors\n};\n\n\nexport default reducer;\n","import { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport game from './game';\nimport levels from './levels';\nimport { combineReducers } from 'redux-loop';\nimport { State } from '../types';\n\n\nfunction createRootReducer(history: History) {\n  return combineReducers<State, any>({\n    game,\n    levels,\n    router: connectRouter(history)\n  });\n}\n\n\nexport default createRootReducer;\n","import { State } from './types';\nimport { Store } from 'redux';\n\n\n/**\n * Loads the specified state slices from local storage.\n */\nfunction loadPersistedState(slices: Array<keyof State>): Partial<State> {\n  const persistedState: Partial<State> = {};\n\n  slices.forEach(sliceName => {\n    try {\n      const serializedSliceState = localStorage.getItem(sliceName);\n\n      if (serializedSliceState) {\n        persistedState[sliceName] = JSON.parse(serializedSliceState);\n      }\n    } catch (err) {\n      console.warn(`Failed to load the state of slice \"${sliceName}\"`, err);\n    }\n  });\n  return persistedState;\n}\n\n/**\n * Persists the specified state slices to local storage.\n */\nfunction setupStatePersistence(store: Store<State>, slices: Array<keyof State>) {\n  let previousState = new Map(Object.entries(store.getState()));\n\n  store.subscribe(() => {\n    const newState = new Map(Object.entries(store.getState()));\n    const changedSlices = slices.filter(sliceName => newState.get(sliceName) !== previousState.get(sliceName));\n\n    changedSlices.forEach(sliceName => {\n      saveSliceState(sliceName, newState.get(sliceName)!);\n    });\n    if (changedSlices.length > 0) {\n      previousState = newState;\n    }\n  });\n}\n\n/**\n * Save the specified slice to local storage.\n */\nfunction saveSliceState<K extends keyof State>(sliceName: K, sliceState: State[K]) {\n  try {\n    const serializedSlice = JSON.stringify(sliceState);\n\n    localStorage.setItem(sliceName, serializedSlice);\n  } catch (err) {\n    console.warn(`Failed to persist the state of slice \"${sliceName}\"`, err);\n  }\n}\n\n\nexport {\n  loadPersistedState,\n  setupStatePersistence\n};\n","import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install, StoreCreator } from 'redux-loop';\nimport createRootReducer from './ducks';\nimport { loadPersistedState, setupStatePersistence } from './localStorage';\nimport { State } from './types';\n\n\nconst PERSISTENT_SLICES: Array<keyof State> = ['levels'];\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?? compose;\n\nfunction configureStore() {\n  const persistedState = loadPersistedState(PERSISTENT_SLICES);\n  const history = createBrowserHistory({ basename: 'sokobot-3d' });\n  const enhancer = composeEnhancers(\n    applyMiddleware(routerMiddleware(history)),\n    install()\n  );\n  const enhancedCreateStore = createStore as StoreCreator;\n  const store = enhancedCreateStore(createRootReducer(history), persistedState as State, enhancer);\n\n  setupStatePersistence(store, PERSISTENT_SLICES);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n      module.hot.accept('./ducks', () => {\n        store.replaceReducer(createRootReducer(history) as any);\n      });\n    }\n  }\n  return {\n    store,\n    history\n  };\n}\n\n\nexport {\n  configureStore\n};\n","import { goBack } from 'connected-react-router';\nimport { Button } from 'grommet';\nimport { Previous } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\n\n\ninterface BackButtonProps extends ConnectedProps<typeof connector> {\n}\n\nfunction BackButton({ goBack }: BackButtonProps) {\n  return <Button icon={<Previous/>} label=\"Back\" onClick={() => goBack()}/>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    goBack: () => dispatch(goBack())\n  };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\n\nexport default connector(BackButton);\nexport { BackButton };\n","import { Box } from 'grommet';\nimport React from 'react';\nimport styled from 'styled-components';\n\ninterface ScreenProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nfunction Screen({ title, children }: ScreenProps) {\n  return (\n    <Box width=\"medium\">\n      <header>\n        <H1>{title}</H1>\n      </header>\n      <Box width=\"medium\" gap=\"small\" align=\"stretch\">\n        {children}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Screen;\n","import React from 'react';\nimport BackButton from '../BackButton';\nimport Screen from '../Screen';\n\n\nfunction Settings() {\n  return (\n    <Screen title=\"Settings\">\n      <BackButton/>\n    </Screen>\n  );\n}\n\n\nexport default Settings;\n","import { push } from 'connected-react-router';\nimport { Button } from 'grommet';\nimport { Play, SettingsOption } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Screen from '../Screen';\n\n\ninterface MenuProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Menu({ startGame, openSettings }: MenuProps) {\n  return (\n    <Screen title=\"Sokobot\">\n      <Button icon={<Play/>} label=\"Start Game\" onClick={startGame}/>\n      <Button icon={<SettingsOption/>} label=\"Settings\" onClick={openSettings}/>\n    </Screen>\n  );\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    startGame: () => dispatch(push('/select-level')),\n    openSettings: () => dispatch(push('/settings'))\n  };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\n\nexport default connector(Menu);\nexport { Menu };\n","import { push } from 'connected-react-router';\nimport { Button } from 'grommet';\nimport { Lock, Unlock } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getLevelNames } from '../../levels';\nimport { State } from '../../state/types';\nimport { levelsSelectors } from '../../state/ducks/levels';\nimport Screen from '../Screen';\n\n\ninterface LevelSelectionProps extends ConnectedProps<typeof connector> {\n}\n\nfunction LevelSelection({ isUnlocked, selectLevel }: LevelSelectionProps) {\n  return (\n    <Screen title=\"Select Level\">\n      {getLevelNames().map((levelName, level) => (\n        isUnlocked(level)\n          ? <Button key={level} label={levelName} icon={<Unlock/>} onClick={() => selectLevel(level)}/>\n          : <Button key={level} label={levelName} icon={<Lock/>} disabled={true}/>\n      ))}\n    </Screen>\n  );\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    isUnlocked: (level: number) => levelsSelectors.isUnlocked(state.levels, level)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    selectLevel: (level: number) => dispatch(push(`/level/${level}`))\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(LevelSelection);\nexport { LevelSelection };\n","import React, { useEffect } from 'react';\n\n\n/**\n * Same as {@link useEffect}, but for side effects that should only happen once, when the component is first rendered.\n */\nfunction useEffectOnce(effect: React.EffectCallback) {\n  useEffect(effect, []);\n}\n\n\nexport default useEffectOnce;\n","import { useEffect, useRef } from 'react';\nimport { minimizeRotation } from '../../mechanics/directions';\n\n\n/**\n * Keeps track of an angle and minimizes the rotation needed to bring it to the current direction.\n *\n * @param currentDirection - an angle (in radians) indicating the current direction, within a circumference\n * @return the closest angle to the previous, which points in the same direction as {@param currentDirection}\n */\nfunction useMinimalRotation(currentDirection: number): number {\n  const ref = useRef<number>();\n  const previousAngle = ref.current;\n  const currentAngle = previousAngle === undefined ? currentDirection : minimizeRotation(previousAngle, currentDirection);\n  useEffect(() => {\n    ref.current = currentAngle;\n  });\n  return currentAngle;\n}\n\n\nexport default useMinimalRotation;\n","import { useEffect, useRef } from 'react';\nimport { Maybe } from '../types';\n\n\n/**\n * Keeps track of the value of a prop, last time the component was rendered.\n *\n * @return the previous value\n */\nfunction usePrevious<T>(currentValue: T): Maybe<T> {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = currentValue;\n  });\n  return ref.current;\n}\n\n\nexport default usePrevious;\n","import { SpringUpdateFn } from '@react-spring/core';\nimport { useSpring } from '@react-spring/three';\nimport { usePrevious } from './index';\n\n\ninterface SimpleMovementAnimationProps {\n  position: [number, number, number];\n  [prop: string]: any;\n}\n\n/**\n * Uses very simple animations to smoothly transition between states.\n */\nfunction useSimpleMovementAnimation<T extends SimpleMovementAnimationProps>(currentProps: T) {\n  const { position } = currentProps;\n  const previousProps = usePrevious(currentProps);\n\n  return useSpring<any>({\n    from: previousProps ?? currentProps,\n    to: async (next: SpringUpdateFn<T>) => {\n      // Handles falls\n      if (previousProps && position[2] < previousProps.position[2]) {\n\n        // moves horizontally\n        await next({\n          ...currentProps,\n          position: [position[0], position[1], previousProps.position[2]]\n        });\n\n        // falls\n        await next({\n          ...currentProps,\n          config: {\n            duration: 100\n          }\n        });\n        return;\n      }\n\n      // Handles simple movements (rotation and horizontal move)\n      await next(currentProps);\n    }\n  });\n}\n\n\nexport default useSimpleMovementAnimation;\n","import React, { useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { extend, useThree } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { gameSelectors } from '../../state/ducks/game';\nimport { State } from '../../state/types';\nimport { useEffectOnce } from '../../utils/hooks';\n\n// False positive, when only the type is needed\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ReactThreeFiber } from 'react-three-fiber';\n\n\nextend({ OrbitControls });\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'orbitControls': ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>;\n    }\n  }\n}\n\ninterface CameraControlsProps extends ConnectedProps<typeof connector> {\n}\n\nfunction CameraControls({ initialPosition }: CameraControlsProps) {\n  const { camera, gl } = useThree();\n  const controls = useRef<OrbitControls>();\n\n  useEffectOnce(() => {\n    if (initialPosition) {\n      camera.position.set(...initialPosition);\n      if (controls.current) {\n        controls.current.update();\n      }\n    }\n  });\n\n  return <orbitControls args={[camera, gl.domElement]} maxPolarAngle={Math.PI / 2} enablePan={false} ref={controls}/>;\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    // TODO: find a proper way to determine a good initial camera position\n    initialPosition: (() => {\n      try {\n        const mapDimensions = gameSelectors.getMapDimensions(state.game);\n        const n = Math.max(3, Math.max(...mapDimensions) * 0.7);\n\n        return [n, n, n] as const;\n      } catch {\n      }\n      return undefined;\n    })()\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(CameraControls);\nexport { CameraControls };\n","import React from 'react';\nimport { a } from 'react-spring/three';\nimport { useSimpleMovementAnimation } from '../../utils/hooks';\n\n\ninterface CardboardBoxProps {\n  position: [number, number, number];\n}\n\nfunction CardboardBox({ position }: CardboardBoxProps) {\n  const props = useSimpleMovementAnimation({ position });\n\n  return (\n    <a.mesh {...props} castShadow={true} receiveShadow={true}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]}/>\n      <meshLambertMaterial attach=\"material\" color={0xaa8844}/>\n    </a.mesh>\n  );\n}\n\n\nexport default CardboardBox;\n","import React from 'react';\n\n\ninterface GroundElevationProps {\n  x: number;\n  y: number;\n  height: number;\n}\n\nfunction GroundElevation({ x, y, height }: GroundElevationProps) {\n  return (\n    <mesh position={[x, y, (1 + height) / 2]} castShadow={true} receiveShadow={true}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, height]}/>\n      <meshPhongMaterial attach=\"material\" color={0x555555}/>\n    </mesh>\n  );\n}\n\n\nexport default GroundElevation;\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { a } from 'react-spring/three';\nimport { gameActions, gameSelectors } from '../../state/ducks/game';\nimport { State } from '../../state/types';\nimport { directionToAngle } from '../../mechanics/directions';\nimport { useEffectOnce, useMinimalRotation, useSimpleMovementAnimation } from '../../utils/hooks';\n\n\ninterface RobotProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Robot({ position, direction, ...actions }: RobotProps) {\n  function onKeyPress(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'w':\n        actions.moveForward();\n        break;\n      case 'd':\n        actions.turnRight();\n        break;\n      case 's':\n        actions.moveBackward();\n        break;\n      case 'a':\n        actions.turnLeft();\n        break;\n    }\n  }\n\n  useEffectOnce(() => {\n    window.addEventListener('keypress', onKeyPress);\n    return () => {\n      window.removeEventListener('keypress', onKeyPress);\n    };\n  });\n\n  const zRotation = useMinimalRotation(direction);\n  const props = useSimpleMovementAnimation({\n    position,\n    rotation: [0, 0, zRotation]\n  });\n\n  return (\n    <a.mesh {...props} castShadow={true} receiveShadow={true}>\n      <coneBufferGeometry attach=\"geometry\" args={[0.5, 1, 10]}/>\n      <meshLambertMaterial attach=\"material\" color={0x6A0BFF}/>\n    </a.mesh>\n  );\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    position: gameSelectors.getRobotPosition(state.game),\n    direction: directionToAngle(gameSelectors.getRobotDirection(state.game))\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    moveForward: () => dispatch(gameActions.moveForward()),\n    moveBackward: () => dispatch(gameActions.moveBackward()),\n    turnRight: () => dispatch(gameActions.turnRight()),\n    turnLeft: () => dispatch(gameActions.turnLeft())\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(Robot);\nexport { Robot };\n","import React from 'react';\n\n\ninterface TargetTileProps {\n  x: number;\n  y: number;\n  height: number;\n}\n\nfunction TargetTile({ x, y, height }: TargetTileProps) {\n  return (\n    <mesh position={[x, y, height + .51]} receiveShadow={true}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]}/>\n      <meshLambertMaterial attach=\"material\" color={0x00FF00}/>\n    </mesh>\n  );\n}\n\n\nexport default TargetTile;\n","import React, { Fragment } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { gameSelectors } from '../../state/ducks/game';\nimport { State } from '../../state/types';\nimport CardboardBox from './CardboardBox';\nimport GroundElevation from './GroundElevation';\nimport Robot from './Robot';\nimport TargetTile from './TargetTile';\n\n\ninterface MapProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Map({ mapDimensions, tilesInfo, movableObjectsInfo, robotKey }: MapProps) {\n  const [xSize, ySize] = mapDimensions;\n\n  return (\n    <group position={[(1 - xSize) / 2, (1 - ySize) / 2, -0.5]}>\n      <Robot key={robotKey}/>\n      {tilesInfo.map(({ x, y, height, hasTarget }) => (\n        <Fragment key={`${x}-${y}`}>\n          {height > 0 && <GroundElevation x={x} y={y} height={height}/>}\n          {hasTarget && <TargetTile x={x} y={y} height={height}/>}\n        </Fragment>\n      ))}\n      {movableObjectsInfo.map(({ key, position }) => (\n        <CardboardBox key={key} position={position}/>\n      ))}\n    </group>\n  );\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    mapDimensions: gameSelectors.getMapDimensions(state.game),\n    tilesInfo: gameSelectors.getTilesInfo(state.game),\n    movableObjectsInfo: gameSelectors.getMovableObjectsInfo(state.game),\n    robotKey: gameSelectors.getRobotKey(state.game)\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(Map);\nexport { Map };\n","import React from 'react';\nimport { ReactReduxContext, Provider } from 'react-redux';\nimport { Canvas } from 'react-three-fiber';\nimport { AxesHelper } from 'react-three-fiber/components';\nimport { Color } from 'three';\nimport CameraControls from './CameraControls';\nimport Map from './Map';\n\n\nfunction MyCanvas() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => (\n        <Canvas shadowMap style={{ backgroundColor: 'black', height: '100%', position: 'absolute', top: 0, left: 0 }}>\n          <Provider store={store}>\n            <CameraControls/>\n            <group rotation={[-Math.PI / 2, 0, 0]}>\n              {process.env.NODE_ENV !== 'production' && <AxesHelper scale={[10, 10, 10]}/>}\n              <ambientLight intensity={0.3}/>\n              <spotLight\n                color={new Color('#fffda7')}\n                castShadow\n                intensity={0.7}\n                penumbra={1}\n                decay={1}\n                angle={Math.PI / 8}\n                position={[10, 10, 10]}\n                shadow-mapSize-width={2048}\n                shadow-mapSize-height={2048}\n              />\n              <Map/>\n            </group>\n          </Provider>\n        </Canvas>\n      )}\n    </ReactReduxContext.Consumer>\n  );\n}\n\n\nexport default MyCanvas;\n","import { Box, Button } from 'grommet';\nimport { LinkDown, LinkUp, RotateLeft, RotateRight } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { gameActions } from '../../../state/ducks/game';\n\n\ninterface ControlsProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Controls({ moveForward, moveBackward, turnLeft, turnRight }: ControlsProps) {\n  return (\n    <Wrapper>\n      <Box align=\"center\">\n        <IconButton icon={<LinkUp/>} title=\"Move forward\" onClick={moveForward}/>\n      </Box>\n      <Box direction=\"row\">\n        <IconButton icon={<RotateLeft/>} title=\"Turn left\" onClick={turnLeft}/>\n        <IconButton icon={<LinkDown/>} title=\"Move backward\" onClick={moveBackward}/>\n        <IconButton icon={<RotateRight/>} title=\"Turn right\" onClick={turnRight}/>\n      </Box>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  bottom: .5rem;\n  right: .5rem;\n  z-index: 1000;\n`;\n\ninterface IconButtonProps {\n  icon: JSX.Element;\n  title: string;\n  onClick: () => void;\n}\n\nfunction IconButton(props: IconButtonProps) {\n  return <Button {...props} plain={false} margin=\"xxsmall\"/>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    moveForward: () => dispatch(gameActions.moveForward()),\n    moveBackward: () => dispatch(gameActions.moveBackward()),\n    turnLeft: () => dispatch(gameActions.turnLeft()),\n    turnRight: () => dispatch(gameActions.turnRight())\n  };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\n\nexport default connector(Controls);\nexport { Controls };\n","import { push } from 'connected-react-router';\nimport { Box, Button } from 'grommet';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { State } from '../../../state/types';\n\n\ninterface LevelClearedDialogProps extends ConnectedProps<typeof connector> {\n  nextLevel: number | undefined;\n}\n\nconst DialogWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 1em;\n  h1 {\n    text-align: center;\n  }\n`;\n\nfunction LevelClearedDialog({ isLevelCleared, nextLevel, goToLevel, goToLevelSelection }: LevelClearedDialogProps) {\n  if (isLevelCleared) {\n    return (\n      <DialogWrapper>\n        <Box width=\"medium\" gap=\"small\" align=\"stretch\" pad=\"small\">\n          <h1>{nextLevel ? 'Level Cleared' : 'Game Cleared'}</h1>\n          {nextLevel !== undefined && <Button label=\"Go to next level\" onClick={() => goToLevel(nextLevel)}/>}\n          <Button label=\"Back to level selection\" onClick={goToLevelSelection}/>\n        </Box>\n      </DialogWrapper>\n    );\n  }\n  return null;\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    isLevelCleared: state.game.finished\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    goToLevel: (level: number) => dispatch(push(`/level/${level}`)),\n    goToLevelSelection: () => dispatch(push('/select-level'))\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(LevelClearedDialog);\nexport { LevelClearedDialog };\n","import { Button } from 'grommet';\nimport { Refresh } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { levelsActions, levelsSelectors } from '../../../state/ducks/levels';\nimport { State } from '../../../state/types';\n\n\ninterface RestartButtonProps extends ConnectedProps<typeof connector> {\n}\n\nfunction RestartButton({ level, restart }: RestartButtonProps) {\n  return (\n    <Wrapper>\n      <Button label=\"Restart\" icon={<Refresh/>} onClick={() => restart(level)}/>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: .5rem;\n  left: .5rem;\n  z-index: 1000;\n`;\n\nfunction mapStateToProps(state: State) {\n  return {\n    level: levelsSelectors.getSelectedLevel(state.levels)!\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    restart: (level: number) => dispatch(levelsActions.selectLevel(level))\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(RestartButton);\nexport { RestartButton };\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Redirect, RouteComponentProps } from 'react-router';\nimport { getLevelMap, getLevelNames } from '../../../levels';\nimport { levelsSelectors } from '../../../state/ducks/levels';\nimport { State } from '../../../state/types';\nimport Screen from '../../Screen';\nimport MyCanvas from '../../webgl/MyCanvas';\nimport Controls from './Controls';\nimport LevelClearedDialog from './LevelClearedDialog';\nimport RestartButton from './RestartButton';\n\n\ninterface MatchParams {\n  level: string;\n}\n\ninterface LevelProps extends RouteComponentProps<MatchParams>, ConnectedProps<typeof connector> {\n}\n\nfunction Level({ match, isUnlocked }: LevelProps) {\n  const level = +match.params.level;\n  const levelName = getLevelNames()[level];\n\n  //TODO: create levelsSelectors.getNextLevel() and move this to LevelClearedDialog\n  const nextLevel = getLevelMap(level + 1) ? level + 1 : undefined;\n\n  if (levelName === undefined || !isUnlocked(level)) {\n    return <Redirect to=\"/select-level\"/>;\n  }\n  return (\n    <Screen title={levelName}>\n      <MyCanvas/>\n      <Controls/>\n      <RestartButton/>\n      <LevelClearedDialog nextLevel={nextLevel}/>\n    </Screen>\n  );\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    isUnlocked: (level: number) => levelsSelectors.isUnlocked(state.levels, level)\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(Level);\nexport { Level };\n","import Level from './Level';\n\nexport default Level;\n","import { ThemeType } from 'grommet';\nimport { DeepPartial } from 'utility-types';\n\n\nconst theme: DeepPartial<ThemeType> = {\n  global: {\n    colors: {\n      icon: {\n        dark: 'text'\n      },\n      brand: '#7D4CDB',\n      control: 'brand',\n      text: '#aaa',\n      background: '#000'\n    },\n    font: {\n      family: 'Arial'\n    }\n  }\n};\n\n\nexport default theme;\n","import React from 'react';\nimport { Grommet, Main, ThemeType } from 'grommet';\nimport { configureStore } from '../state/store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Redirect, Route, Switch } from 'react-router';\nimport Settings from './screens/Settings';\nimport Menu from './screens/Menu';\nimport LevelSelection from './screens/LevelSelection';\nimport Level from './screens/Level';\nimport theme from '../theme';\n\n\nconst { store, history } = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Grommet full theme={theme as ThemeType}>\n          <Main align=\"center\">\n            <Switch>\n              <Route exact path=\"/\" component={Menu}/>\n              <Route exact path=\"/settings\" component={Settings}/>\n              <Route exact path=\"/select-level\" component={LevelSelection}/>\n              <Route exact path=\"/level/:level\" component={Level}/>\n              <Route render={() => <Redirect to=\"/\"/>}/>\n            </Switch>\n          </Main>\n        </Grommet>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// CRA docs about PWA: https://create-react-app.dev/docs/making-a-progressive-web-app/\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}