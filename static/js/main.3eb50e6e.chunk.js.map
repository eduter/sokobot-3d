{"version":3,"sources":["mechanics/directions.ts","levels.ts","mechanics/getRelevantTiles.ts","mechanics/isLevelCleared.ts","mechanics/isMoveValid.ts","mechanics/pushObjects.ts","state/ducks/levels/types.ts","state/ducks/levels/actions.ts","state/ducks/levels/selectors.ts","state/ducks/levels/reducer.ts","state/ducks/game/types.ts","state/ducks/levels/index.ts","state/ducks/game/actions.ts","state/ducks/game/reducer.ts","state/ducks/game/selectors.ts","state/ducks/game/index.ts","state/ducks/settings/types.ts","state/ducks/settings/reducer.ts","state/ducks/settings/actions.ts","state/ducks/settings/selectors.ts","state/ducks/settings/index.ts","state/ducks/index.ts","state/localStorage.ts","state/configureStore.ts","state/index.ts","components/Screen.tsx","theme.ts","components/screens/Menu.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","rightAngle","Math","PI","DIRECTIONS","NORTH","dx","dy","angle","WEST","SOUTH","EAST","rightOf","leftOf","move","point","direction","x","y","rotateRight","rotateLeft","oppositeDirection","directionToAngle","minimizeRotation","previousAngle","currentDirection","fullRotation","directionDiff","levels","height","width","targets","tiles","objects","type","robot","position","getLevelNames","map","_","index","getLevelMap","level","robotX","robotY","robotTile","robotZ","length","key","createUniqueKey","column","obj","addKeys","initialX","initialY","initialZ","join","getTile","undefined","getRelevantTiles","robotPosition","moveDirection","targetPosition","pushedObjectsPosition","isLevelCleared","levelMap","hasBox","tile","some","o","targetX","targetY","isValidTile","isMoveValid","currentTile","targetTile","pushedObectsTile","slice","pushObjects","from","fromX","fromY","toX","toY","fromTile","ActionTypes","selectLevel","SELECT_LEVEL","payload","clearLevel","CLEAR_LEVEL","getSelectedLevel","state","selectedLevel","isUnlocked","unlockedLevels","getNextLevel","nextLevel","INITIAL_STATE","parseLevel","path","startsWith","parseInt","substr","levelsReducer","reducer","action","LOCATION_CHANGE","location","pathname","loop","Cmd","gameActions","startLevel","START_LEVEL","finishLevel","FINISH_LEVEL","moveForward","MOVE_FORWARD","moveBackward","MOVE_BACKWARD","turnRight","TURN_RIGHT","turnLeft","TURN_LEFT","MOVE","finished","canMove","relevantTiles","getRobotPosition","assertMapDefined","getRobotDirection","getRobotKey","getMapDimensions","getTilesInfo","Set","tilesInfo","hasTarget","has","push","getMovableObjectsInfo","allObjects","tileObjects","Error","newState","getNeighbor","levelsActions","onScreenControls","toggleOnScreenControls","TOGGLE_ON_SCREEN_CONTROLS","displayOnScreenControls","createRootReducer","history","combineReducers","game","router","connectRouter","settings","setupStatePersistence","store","slices","previousState","Map","Object","entries","getState","subscribe","changedSlices","filter","sliceName","get","forEach","sliceState","serializedSlice","JSON","stringify","localStorage","setItem","err","console","warn","saveSliceState","PERSISTENT_SLICES","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","persistedState","serializedSliceState","getItem","parse","loadPersistedState","createBrowserHistory","basename","enhancer","applyMiddleware","routerMiddleware","install","enhancedCreateStore","createStore","H1","styled","h1","Screen","title","children","gap","align","theme","global","colors","icon","dark","brand","control","text","background","font","family","connector","connect","dispatch","startGame","openSettings","Button","Play","label","onClick","SettingsOption","Level","lazy","LevelSelection","Settings","App","Grommet","full","Main","fallback","exact","component","Menu","render","to","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3eb50e6e.chunk.js","sourcesContent":["export type Point2D = [number, number];\n\nenum Direction {\n  NORTH = 'NORTH',\n  EAST = 'EAST',\n  SOUTH = 'SOUTH',\n  WEST = 'WEST'\n}\n\nconst rightAngle = Math.PI / 2;\n\nconst DIRECTIONS = {\n  NORTH: { dx: 0, dy: 1, angle: 0 },\n  WEST: { dx: -1, dy: 0, angle: rightAngle },\n  SOUTH: { dx: 0, dy: -1, angle: 2 * rightAngle },\n  EAST: { dx: 1, dy: 0, angle: 3 * rightAngle }\n} as const;\n\nconst rightOf: Record<Direction, Direction> = {\n  [Direction.NORTH]: Direction.EAST,\n  [Direction.EAST]: Direction.SOUTH,\n  [Direction.SOUTH]: Direction.WEST,\n  [Direction.WEST]: Direction.NORTH\n};\n\nconst leftOf: Record<Direction, Direction> = {\n  [Direction.NORTH]: Direction.WEST,\n  [Direction.WEST]: Direction.SOUTH,\n  [Direction.SOUTH]: Direction.EAST,\n  [Direction.EAST]: Direction.NORTH\n};\n\nfunction move(point: Point2D, direction: Direction): Point2D {\n  const [x, y] = point;\n  const { dx, dy } = DIRECTIONS[direction];\n\n  return [x + dx, y + dy];\n}\n\nfunction rotateRight(direction: Direction): Direction {\n  return rightOf[direction];\n}\n\nfunction rotateLeft(direction: Direction): Direction {\n  return leftOf[direction];\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n  return rightOf[rightOf[direction]];\n}\n\nfunction directionToAngle(direction: Direction): number {\n  return DIRECTIONS[direction].angle;\n}\n\n/**\n * Finds the angle that minimizes the rotation needed to go from one angle to a given direction.\n *\n * @param previousAngle - an angle in radians (may be negative or well over 2 * PI)\n * @param currentDirection - an angle (in radians) indicating the direction of the result, within a circumference\n * @return the closest angle to {@param previousAngle}, which points in the same direction as the angle\n *    {@param currentDirection}\n */\nfunction minimizeRotation(previousAngle: number, currentDirection: number): number {\n  const fullRotation = 2 * Math.PI;\n  const directionDiff = (currentDirection - previousAngle) % fullRotation;\n\n  if (directionDiff > Math.PI) {\n    return previousAngle + directionDiff - fullRotation;\n  } else if (directionDiff < -Math.PI) {\n    return previousAngle + directionDiff + fullRotation;\n  }\n  return previousAngle + directionDiff;\n}\n\nexport {\n  Direction,\n  move,\n  rotateRight,\n  rotateLeft,\n  oppositeDirection,\n  directionToAngle,\n  minimizeRotation\n};\n","import { LevelMap } from './mechanics/types';\nimport { Maybe } from './utils/types';\nimport { Direction } from './mechanics/directions';\n\n\nconst levels: LevelMap[] = [\n  // 1 move\n  {\n    height: 3,\n    width: 3,\n    targets: [[1, 2]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [{ type: 'box' }] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [1, 0],\n      direction: Direction.NORTH\n    }\n  },\n  // 2nd 2D\n  {\n    height: 4,\n    width: 5,\n    targets: [[0, 1], [4, 0]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [{ type: 'box' }] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n  },\n  // 1st 3D\n  {\n    height: 5,\n    width: 5,\n    targets: [[0, 0], [4, 4]],\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 0, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [{ type: 'box' }, { type: 'box' }] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    robot: {\n      position: [2, 2],\n      direction: Direction.NORTH\n    }\n  },\n  // 2nd 3D\n  {\n    height: 3,\n    width: 5,\n    targets: [[0, 2], [4, 2]],\n    tiles: [\n      [{ height: 1, objects: [] },{ height: 1, objects: [] },{ height: 1, objects: []}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: [{ type: 'box' }]}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: []}],\n      [{ height: 2, objects: [] },{ height: 2, objects: [{ type: 'box' }] },{ height: 1, objects: []}],\n      [{ height: 1, objects: [] },{ height: 1, objects: [] },{ height: 1, objects: []}]\n    ],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n },\n  // 3rd 3D\n  {\n    height: 6,\n    width: 5,\n    tiles: [\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [] }, { height: 2, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 2, objects: [] }],\n      [{ height: 2, objects: [] }, { height: 2, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 2, objects: [{ type: 'box' }] }, { height: 2, objects: [] }],\n      [{ height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }, { height: 1, objects: [] }]\n    ],\n    targets: [[0, 2], [0, 3], [4, 0], [4, 5]],\n    robot: {\n      position: [2, 0],\n      direction: Direction.NORTH\n    }\n  }\n];\n\n/**\n * Lists the names of all levels.\n * (levels may have have meaningful names later on)\n */\nfunction getLevelNames(): string[] {\n  return levels.map((_, index) => `Level ${index + 1}`);\n}\n\n/**\n * Returns a copy of a level's map, given its index.\n */\nfunction getLevelMap(level: number): Maybe<LevelMap> {\n  const map = levels[level];\n\n  if (map) {\n    return addKeys(level, map);\n  }\n  return undefined;\n}\n\n/**\n * Returns a copy of a map, adding unique keys to robot and movable objects.\n */\nfunction addKeys(level: number, map: LevelMap): LevelMap {\n  const [robotX, robotY] = map.robot.position;\n  const robotTile = map.tiles[robotX][robotY];\n  const robotZ = robotTile.height + robotTile.objects.length;\n\n  return {\n    ...map,\n    robot: {\n      ...map.robot,\n      key: createUniqueKey(level, robotX, robotY, robotZ)\n    },\n    tiles: map.tiles.map((column, x) => (\n      column.map(({ height, objects }, y) => ({\n        height,\n        objects: objects.map((obj, index) => ({\n          ...obj,\n          key: createUniqueKey(level, x, y, height + 1 + index)\n        }))\n      }))\n    ))\n  };\n}\n\n/**\n * Creates a deterministic unique key for an object, based on its level and initial position.\n */\nfunction createUniqueKey(level: number, initialX: number, initialY: number, initialZ: number): string {\n  return [level, initialX, initialY, initialZ].join('-');\n}\n\n\nexport {\n  getLevelNames,\n  getLevelMap\n};\n","import { Maybe } from '../utils/types';\nimport { Direction, move, Point2D } from './directions';\nimport { Tile } from './types';\n\n\nfunction getRelevantTiles(tiles: Tile[][], robotPosition: Point2D, moveDirection: Direction) {\n  const targetPosition = move(robotPosition, moveDirection);\n  const pushedObjectsPosition = move(targetPosition, moveDirection);\n\n  return [\n    getTile(tiles, robotPosition),\n    getTile(tiles, targetPosition),\n    getTile(tiles, pushedObjectsPosition)\n  ] as [Tile, Maybe<Tile>, Maybe<Tile>];\n}\n\nfunction getTile(tiles: Tile[][], [x, y]: Point2D): Maybe<Tile> {\n  return tiles[x] ? tiles[x][y] : undefined;\n}\n\n\nexport default getRelevantTiles;\n","import { LevelMap, Tile } from './types';\n\n\nfunction isLevelCleared(levelMap: LevelMap): boolean {\n  const hasBox = (tile: Tile) => tile.objects.some(o => o.type === 'box');\n\n  // checks for a target without a box\n  if (levelMap.targets.some(([x, y]) => !hasBox(levelMap.tiles[x][y]))) {\n    return false;\n  }\n\n  // checks for a box without a target\n  return !levelMap.tiles.some((column, x) => (\n    column.some((tile, y) => (\n      hasBox(tile) && !levelMap.targets.some(([targetX, targetY]) => targetX === x && targetY === y)\n    ))\n  ));\n}\n\n\nexport default isLevelCleared;\n","import { Maybe } from '../utils/types';\nimport { Tile } from './types';\n\n\nfunction isMoveValid(currentTile: Tile, targetTile: Maybe<Tile>, pushedObectsTile: Maybe<Tile>): boolean {\n  if (!isValidTile(targetTile)) {\n    // target is beyond the edge or is a hole\n    return false;\n  } else if (targetTile.height > currentTile.height + currentTile.objects.length) {\n    // trying to move toward a wall\n    return false;\n  }\n\n  const height = currentTile.height + currentTile.objects.length;\n  const pushedObjects = targetTile.objects.slice(height - targetTile.height);\n\n  if (pushedObjects.length > 0) {\n    if (!isValidTile(pushedObectsTile)) {\n      // trying to push objects into the void\n      return false;\n    } else if (pushedObectsTile.height + pushedObectsTile.objects.length > height) {\n      // trying to push objects into a wall/object\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isValidTile(tile: Maybe<Tile>): tile is Tile {\n  return tile !== undefined && tile.height > 0;\n}\n\n\nexport default isMoveValid;\n","import { Direction, move, Point2D } from './directions';\nimport { Tile } from './types';\n\n\nfunction pushObjects(tiles: Tile[][], robotPosition: Point2D, direction: Direction): Tile[][] {\n  const from = move(robotPosition, direction);\n  const [robotX, robotY] = robotPosition;\n  const [fromX, fromY] = from;\n  const [toX, toY] = move(from, direction);\n  const robotTile = tiles[robotX][robotY];\n  const height = robotTile.height + robotTile.objects.length;\n\n  return tiles.map((column, x) => (\n    column.map((tile, y) => {\n      if (x === fromX && y === fromY) {\n        return {\n          ...tile,\n          objects: tile.objects.slice(0, height - tile.height)\n        };\n      } else if (x === toX && y === toY) {\n        const fromTile = tiles[fromX][fromY];\n        return {\n          ...tile,\n          objects: [...tile.objects, ...fromTile.objects.slice(height - fromTile.height)]\n        };\n      }\n      return tile;\n    })\n  ))\n}\n\n\nexport default pushObjects;\n","import { DeepReadonly } from 'utility-types';\n\n\nexport enum ActionTypes {\n  SELECT_LEVEL = 'levels/SELECT_LEVEL',\n  CLEAR_LEVEL = 'levels/CLEAR_LEVEL',\n}\n\nexport type State = DeepReadonly<{\n  readonly unlockedLevels: number;\n  readonly selectedLevel?: number;\n}>;\n","import { Action } from '../../../utils/types';\nimport { ActionTypes } from './types';\n\n\nexport type LevelsAction = (\n  Action<ActionTypes.SELECT_LEVEL, { level: number }>\n  | Action<ActionTypes.CLEAR_LEVEL>\n);\n\nfunction selectLevel(level: number): LevelsAction {\n  return {\n    type: ActionTypes.SELECT_LEVEL,\n    payload: {\n      level\n    }\n  };\n}\n\nfunction clearLevel(): LevelsAction {\n  return { type: ActionTypes.CLEAR_LEVEL };\n}\n\n\nexport {\n  selectLevel,\n  clearLevel\n};\n","import { getLevelNames } from '../../../levels';\nimport { Maybe } from '../../../utils/types';\nimport { State } from './types';\n\n\nfunction getSelectedLevel(state: State) {\n  return state.selectedLevel;\n}\n\nfunction isUnlocked(state: State, level: number) {\n  return level < state.unlockedLevels;\n}\n\nfunction getNextLevel(state: State): Maybe<number> {\n  if (state.selectedLevel !== undefined) {\n    const nextLevel = state.selectedLevel + 1;\n\n    if (nextLevel in getLevelNames()) {\n      return nextLevel;\n    }\n  }\n  return undefined;\n}\n\n\nexport {\n  getSelectedLevel,\n  isUnlocked,\n  getNextLevel\n};\n","import { LOCATION_CHANGE, LocationChangeAction } from 'connected-react-router';\nimport { Cmd, loop } from 'redux-loop';\nimport { getLevelMap } from '../../../levels';\nimport { assertNever, Maybe, Reducer } from '../../../utils/types';\nimport { gameActions } from '../game';\nimport { LevelsAction, selectLevel } from './actions';\nimport { isUnlocked } from './selectors';\nimport { ActionTypes, State } from './types';\n\n\nconst INITIAL_STATE: State = {\n  unlockedLevels: 1\n};\n\ntype HandledAction = LevelsAction | LocationChangeAction;\ntype TriggeredAction = LevelsAction | ReturnType<typeof gameActions.startLevel>;\n\nconst levelsReducer: Reducer<State, HandledAction, TriggeredAction> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case LOCATION_CHANGE: {\n      const level = parseLevel(action.payload.location.pathname);\n\n      if (level !== undefined) {\n        return loop(\n          state,\n          Cmd.action(selectLevel(level))\n        );\n      }\n      return state;\n    }\n    case ActionTypes.SELECT_LEVEL: {\n      const { level } = action.payload;\n      const levelMap = getLevelMap(level);\n\n      if (levelMap && isUnlocked(state, level)) {\n        return loop(\n          { ...state, selectedLevel: level },\n          Cmd.action(gameActions.startLevel(levelMap))\n        );\n      }\n      return state;\n    }\n    case ActionTypes.CLEAR_LEVEL:\n      return {\n        ...state,\n        unlockedLevels: state.unlockedLevels + (state.selectedLevel === state.unlockedLevels - 1 ? 1 : 0)\n      };\n    default:\n      assertNever(action);\n      return state;\n  }\n};\n\nfunction parseLevel(path: string): Maybe<number> {\n  const prefix = '/level/';\n\n  if (!path.startsWith(prefix)) {\n    return undefined;\n  }\n  return parseInt(path.substr(prefix.length));\n}\n\n\nexport default levelsReducer;\n","import { LevelMap } from '../../../mechanics/types';\n\n\nexport enum ActionTypes {\n  START_LEVEL = 'game/START_LEVEL',\n  FINISH_LEVEL = 'game/FINISH_LEVEL',\n  MOVE = 'game/MOVE',\n  MOVE_FORWARD = 'game/MOVE_FORWARD',\n  MOVE_BACKWARD = 'game/MOVE_BACKWARD',\n  TURN_RIGHT = 'game/TURN_RIGHT',\n  TURN_LEFT = 'game/TURN_LEFT'\n}\n\nexport interface State {\n  finished: boolean;\n  map?: LevelMap;\n}\n","import reducer from './reducer';\nimport * as levelsActions from './actions';\nimport * as levelsSelectors from './selectors';\n\n\nexport {\n  levelsActions,\n  levelsSelectors\n};\n\n\nexport default reducer;\n","import { Direction } from '../../../mechanics/directions';\nimport { LevelMap } from '../../../mechanics/types';\nimport { Action } from '../../../utils/types';\nimport { ActionTypes } from './types';\n\n\nexport type GameAction = (\n  Action<ActionTypes.START_LEVEL, { map: LevelMap }>\n  | Action<ActionTypes.FINISH_LEVEL>\n  | Action<ActionTypes.MOVE_FORWARD>\n  | Action<ActionTypes.MOVE_BACKWARD>\n  | Action<ActionTypes.TURN_LEFT>\n  | Action<ActionTypes.TURN_RIGHT>\n  | Action<ActionTypes.MOVE, Direction>\n);\n\nfunction startLevel(map: LevelMap): GameAction {\n  return {\n    type: ActionTypes.START_LEVEL,\n    payload: {\n      map\n    }\n  };\n}\n\nfunction finishLevel(): GameAction {\n  return { type: ActionTypes.FINISH_LEVEL };\n}\n\nfunction moveForward(): GameAction {\n  return { type: ActionTypes.MOVE_FORWARD };\n}\n\nfunction moveBackward(): GameAction {\n  return { type: ActionTypes.MOVE_BACKWARD };\n}\n\nfunction turnRight(): GameAction {\n  return { type: ActionTypes.TURN_RIGHT };\n}\n\nfunction turnLeft(): GameAction {\n  return { type: ActionTypes.TURN_LEFT };\n}\n\nfunction move(direction: Direction): GameAction {\n  return {\n    type: ActionTypes.MOVE,\n    payload: direction\n  };\n}\n\n\nexport {\n  startLevel,\n  finishLevel,\n  moveForward,\n  moveBackward,\n  turnRight,\n  turnLeft,\n  move\n};\n","import { Cmd, loop } from 'redux-loop';\nimport {\n  Direction,\n  move as getNeighbor,\n  oppositeDirection,\n  rotateLeft,\n  rotateRight\n} from '../../../mechanics/directions';\nimport getRelevantTiles from '../../../mechanics/getRelevantTiles';\nimport isLevelCleared from '../../../mechanics/isLevelCleared';\nimport isMoveValid from '../../../mechanics/isMoveValid';\nimport pushObjects from '../../../mechanics/pushObjects';\nimport { LevelMap } from '../../../mechanics/types';\nimport { assertNever, Reducer } from '../../../utils/types';\nimport { levelsActions } from '../levels';\nimport { finishLevel, GameAction, move } from './actions';\nimport { ActionTypes, State } from './types';\n\n\nconst INITIAL_STATE: State = {\n  finished: false\n};\n\ntype TriggeredAction = GameAction | ReturnType<typeof levelsActions.clearLevel>;\n\nconst gameReducer: Reducer<State, GameAction, TriggeredAction> = (state = INITIAL_STATE, action) => {\n  if (action.type === ActionTypes.START_LEVEL) {\n    const { map } = action.payload;\n\n    return {\n      finished: false,\n      map\n    };\n  } else if (state.map) {\n    switch (action.type) {\n      case ActionTypes.MOVE_FORWARD: {\n        const direction = state.map.robot.direction;\n\n        if (canMove(state.map, direction)) {\n          return loop(state, Cmd.action(move(direction)));\n        }\n        return state;\n      }\n      case ActionTypes.MOVE_BACKWARD: {\n        const direction = oppositeDirection(state.map.robot.direction);\n\n        if (canMove(state.map, direction)) {\n          return loop(state, Cmd.action(move(direction)));\n        }\n        return state;\n      }\n      case ActionTypes.TURN_RIGHT:\n        return {\n          ...state,\n          map: {\n            ...state.map,\n            robot: {\n              ...state.map.robot,\n              direction: rotateRight(state.map.robot.direction)\n            }\n          }\n        };\n      case ActionTypes.TURN_LEFT:\n        return {\n          ...state,\n          map: {\n            ...state.map,\n            robot: {\n              ...state.map.robot,\n              direction: rotateLeft(state.map.robot.direction)\n            }\n          }\n        };\n      case ActionTypes.MOVE:\n        const newState = {\n          ...state,\n          map: {\n            ...state.map,\n            tiles: pushObjects(state.map.tiles, state.map.robot.position, action.payload),\n            robot: {\n              ...state.map.robot,\n              position: getNeighbor(state.map.robot.position, action.payload),\n            }\n          }\n        };\n        if (isLevelCleared(newState.map)) {\n          return loop(newState, Cmd.action(finishLevel()));\n        }\n        return newState;\n      case ActionTypes.FINISH_LEVEL:\n        return loop(\n          { ...state, finished: true },\n          Cmd.action(levelsActions.clearLevel())\n        );\n      default:\n        assertNever(action);\n        return state;\n    }\n  } else {\n    return state;\n  }\n};\n\nfunction canMove(state: LevelMap, direction: Direction) {\n  const relevantTiles = getRelevantTiles(state.tiles, state.robot.position, direction);\n  return isMoveValid(...relevantTiles);\n}\n\n\nexport default gameReducer;\nexport { INITIAL_STATE };\n","import { Direction } from '../../../mechanics/directions';\nimport { LevelMap, MovableObject } from '../../../mechanics/types';\nimport { State } from './types';\n\n\ninterface TileStaticInfo {\n  x: number;\n  y: number;\n  height: number;\n  hasTarget: boolean;\n}\n\ninterface MovableObjectsInfo extends MovableObject {\n  position: [number, number, number];\n}\n\n\nfunction getRobotPosition(state: State): [number, number, number] {\n  assertMapDefined(state);\n\n  const [x, y] = state.map.robot.position;\n  const z = state.map.tiles[x][y].height + state.map.tiles[x][y].objects.length + 1;\n\n  return [x, y, z];\n}\n\nfunction getRobotDirection(state: State): Direction {\n  assertMapDefined(state);\n  return state.map.robot.direction;\n}\n\nfunction getRobotKey(state: State): string {\n  assertMapDefined(state);\n  return state.map.robot.key!;\n}\n\nfunction getMapDimensions(state: State): [number, number] {\n  assertMapDefined(state);\n  return [state.map.width, state.map.height];\n}\n\n/**\n * Lists the static info about all map tiles.\n */\nfunction getTilesInfo(state: State): TileStaticInfo[] {\n  assertMapDefined(state);\n\n  const { map: { tiles }} = state;\n  const targets = new Set<string>(state.map.targets.map(point => point.join('-')));\n  const tilesInfo = [];\n\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const height = tiles[x][y].height;\n      const hasTarget = targets.has(x + '-' + y);\n\n      tilesInfo.push({ x, y, height, hasTarget });\n    }\n  }\n  return tilesInfo;\n}\n\n/**\n * Lists all map objects that can be moved (pushed).\n */\nfunction getMovableObjectsInfo(state: State): MovableObjectsInfo[] {\n  assertMapDefined(state);\n\n  const { map: { tiles }} = state;\n  const allObjects = [];\n\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const tileObjects = tiles[x][y].objects.map((obj, index) => {\n        return {\n          ...obj,\n          position: [x, y, tiles[x][y].height + index + 1]\n        } as MovableObjectsInfo;\n      });\n\n      allObjects.push(...tileObjects);\n    }\n  }\n  return allObjects;\n}\n\nfunction isLevelCleared(state: State): boolean {\n  return state.finished;\n}\n\nfunction assertMapDefined(state: State): asserts state is State & { map: LevelMap } {\n  if (!state.map) {\n    throw Error('No map defined.');\n  }\n}\n\n\nexport {\n  getRobotPosition,\n  getRobotDirection,\n  getRobotKey,\n  getMapDimensions,\n  getTilesInfo,\n  getMovableObjectsInfo,\n  isLevelCleared\n};\n","import reducer from './reducer';\nimport * as gameActions from './actions';\nimport * as gameSelectors from './selectors';\n\n\nexport {\n  gameActions,\n  gameSelectors\n};\n\n\nexport default reducer;\n","import { DeepReadonly } from 'utility-types';\n\n\nexport enum ActionTypes {\n  TOGGLE_ON_SCREEN_CONTROLS = 'settings/TOGGLE_ON_SCREEN_CONTROLS'\n}\n\nexport type State = DeepReadonly<{\n  onScreenControls: boolean;\n}>;\n","import { assertNever, Reducer } from '../../../utils/types';\nimport { SettingsAction } from './actions';\nimport { ActionTypes, State } from './types';\n\n\nconst INITIAL_STATE: State = {\n  onScreenControls: true\n};\n\nconst settingsReducer: Reducer<State, SettingsAction> = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.TOGGLE_ON_SCREEN_CONTROLS:\n      return {\n        onScreenControls: !state.onScreenControls\n      };\n    default:\n      assertNever(action.type);\n      return state;\n  }\n};\n\n\nexport default settingsReducer;\nexport { INITIAL_STATE };\n","import { Action } from '../../../utils/types';\nimport { ActionTypes } from './types';\n\n\nexport type SettingsAction = (\n  Action<ActionTypes.TOGGLE_ON_SCREEN_CONTROLS>\n);\n\nfunction toggleOnScreenControls(): SettingsAction {\n  return { type: ActionTypes.TOGGLE_ON_SCREEN_CONTROLS };\n}\n\n\nexport {\n  toggleOnScreenControls\n};\n","import { State } from './types';\n\n\nfunction displayOnScreenControls(state: State): boolean {\n  return state.onScreenControls;\n}\n\n\nexport {\n  displayOnScreenControls\n};\n","import reducer from './reducer';\nimport * as settingsActions from './actions';\nimport * as settingsSelectors from './selectors';\n\n\nexport {\n  settingsActions,\n  settingsSelectors\n};\n\n\nexport default reducer;\n","import { connectRouter, RouterState } from 'connected-react-router';\nimport { History } from 'history';\nimport game from './game';\nimport levels from './levels';\nimport settings from './settings';\nimport { combineReducers } from 'redux-loop';\nimport { State as LevelsState } from './levels/types';\nimport { State as GameState } from './game/types';\nimport { State as SettingsState } from './settings/types';\n\n\nexport type State = {\n  game: GameState;\n  levels: LevelsState;\n  router: RouterState<History.PoorMansUnknown>;\n  settings: SettingsState;\n}\n\nfunction createRootReducer(history: History) {\n  return combineReducers<State, any>({\n    game,\n    levels,\n    router: connectRouter(history),\n    settings\n  });\n}\n\n\nexport default createRootReducer;\n","import { Store } from 'redux';\nimport { State } from './ducks';\n\n\n/**\n * Loads the specified state slices from local storage.\n */\nfunction loadPersistedState(slices: Array<keyof State>): Partial<State> {\n  const persistedState: Partial<State> = {};\n\n  slices.forEach(sliceName => {\n    try {\n      const serializedSliceState = localStorage.getItem(sliceName);\n\n      if (serializedSliceState) {\n        persistedState[sliceName] = JSON.parse(serializedSliceState);\n      }\n    } catch (err) {\n      console.warn(`Failed to load the state of slice \"${sliceName}\"`, err);\n    }\n  });\n  return persistedState;\n}\n\n/**\n * Persists the specified state slices to local storage.\n */\nfunction setupStatePersistence(store: Store<State>, slices: Array<keyof State>) {\n  let previousState = new Map(Object.entries(store.getState()));\n\n  store.subscribe(() => {\n    const newState = new Map(Object.entries(store.getState()));\n    const changedSlices = slices.filter(sliceName => newState.get(sliceName) !== previousState.get(sliceName));\n\n    changedSlices.forEach(sliceName => {\n      saveSliceState(sliceName, newState.get(sliceName)!);\n    });\n    if (changedSlices.length > 0) {\n      previousState = newState;\n    }\n  });\n}\n\n/**\n * Save the specified slice to local storage.\n */\nfunction saveSliceState<K extends keyof State>(sliceName: K, sliceState: State[K]) {\n  try {\n    const serializedSlice = JSON.stringify(sliceState);\n\n    localStorage.setItem(sliceName, serializedSlice);\n  } catch (err) {\n    console.warn(`Failed to persist the state of slice \"${sliceName}\"`, err);\n  }\n}\n\n\nexport {\n  loadPersistedState,\n  setupStatePersistence\n};\n","import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { install, StoreCreator } from 'redux-loop';\nimport createRootReducer, { State } from './ducks';\nimport { loadPersistedState, setupStatePersistence } from './localStorage';\n\n\nconst PERSISTENT_SLICES: Array<keyof State> = ['levels', 'settings'];\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?? compose;\n\nfunction configureStore() {\n  const persistedState = loadPersistedState(PERSISTENT_SLICES);\n  const history = createBrowserHistory({ basename: 'sokobot-3d' });\n  const enhancer = composeEnhancers(\n    applyMiddleware(routerMiddleware(history)),\n    install()\n  );\n  const enhancedCreateStore = createStore as StoreCreator;\n  const store = enhancedCreateStore(createRootReducer(history), persistedState as State, enhancer);\n\n  setupStatePersistence(store, PERSISTENT_SLICES);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n      module.hot.accept('./ducks', () => {\n        store.replaceReducer(createRootReducer(history) as any);\n      });\n    }\n  }\n  return {\n    store,\n    history\n  };\n}\n\n\nexport default configureStore;\n","import { State } from './ducks';\nimport { gameActions, gameSelectors } from './ducks/game';\nimport { levelsActions, levelsSelectors } from './ducks/levels';\nimport { settingsActions, settingsSelectors } from './ducks/settings';\nimport configureStore from './configureStore';\n\n\nexport type RootState = State;\n\nexport {\n  configureStore,\n  gameActions,\n  gameSelectors,\n  levelsActions,\n  levelsSelectors,\n  settingsActions,\n  settingsSelectors\n};\n","import { Box } from 'grommet';\nimport React from 'react';\nimport styled from 'styled-components';\n\ninterface ScreenProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nconst H1 = styled.h1`\n  text-align: center;\n`;\n\nfunction Screen({ title, children }: ScreenProps) {\n  return (\n    <Box width=\"medium\">\n      <header>\n        <H1>{title}</H1>\n      </header>\n      <Box width=\"medium\" gap=\"small\" align=\"stretch\">\n        {children}\n      </Box>\n    </Box>\n  );\n}\n\nexport default Screen;\n","import { ThemeType } from 'grommet';\nimport { DeepPartial } from 'utility-types';\n\n\nconst theme: DeepPartial<ThemeType> = {\n  global: {\n    colors: {\n      icon: {\n        dark: 'text'\n      },\n      brand: '#7D4CDB',\n      control: 'brand',\n      text: '#aaa',\n      background: '#000'\n    },\n    font: {\n      family: 'Arial'\n    }\n  }\n};\n\n\nexport default theme;\n","import { push } from 'connected-react-router';\nimport { Button } from 'grommet';\nimport { Play, SettingsOption } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Screen from '../Screen';\n\n\ninterface MenuProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Menu({ startGame, openSettings }: MenuProps) {\n  return (\n    <Screen title=\"Sokobot\">\n      <Button icon={<Play/>} label=\"Start Game\" onClick={startGame}/>\n      <Button icon={<SettingsOption/>} label=\"Settings\" onClick={openSettings}/>\n    </Screen>\n  );\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    startGame: () => dispatch(push('/select-level')),\n    openSettings: () => dispatch(push('/settings'))\n  };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\n\nexport default connector(Menu);\nexport { Menu };\n","import { ConnectedRouter } from 'connected-react-router';\nimport { Grommet, Main, ThemeType } from 'grommet';\nimport React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router';\nimport theme from '../theme';\nimport { configureStore } from '../state';\nimport Menu from './screens/Menu';\n\nconst Level = lazy(() => import('./screens/Level'));\nconst LevelSelection = lazy(() => import('./screens/LevelSelection'));\nconst Settings = lazy(() => import('./screens/Settings'));\n\n\nconst { store, history } = configureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Grommet full theme={theme as ThemeType}>\n          <Main align=\"center\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route exact path=\"/\" component={Menu}/>\n                <Route exact path=\"/settings\" component={Settings}/>\n                <Route exact path=\"/select-level\" component={LevelSelection}/>\n                <Route exact path=\"/level/:level\" component={Level}/>\n                <Route render={() => <Redirect to=\"/\"/>}/>\n              </Switch>\n            </Suspense>\n          </Main>\n        </Grommet>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// CRA docs about PWA: https://create-react-app.dev/docs/making-a-progressive-web-app/\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}