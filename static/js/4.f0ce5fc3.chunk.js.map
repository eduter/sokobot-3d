{"version":3,"sources":["utils/hooks/useEffectOnce.ts","utils/hooks/useMinimalRotation.ts","utils/hooks/usePrevious.ts","utils/hooks/useSimpleMovementAnimation.ts","components/webgl/CameraControls.tsx","components/webgl/CardboardBox.tsx","components/webgl/GroundElevation.tsx","components/webgl/Robot.tsx","components/webgl/TargetTile.tsx","components/webgl/Map.tsx","components/webgl/MyCanvas.tsx","components/screens/Level/GameControls.tsx","components/screens/Level/LevelClearedDialog.tsx","components/screens/Level/RestartButton.tsx","components/screens/Level/Level.tsx","components/screens/Level/index.ts"],"names":["useEffectOnce","effect","useEffect","useMinimalRotation","currentDirection","ref","useRef","previousAngle","current","currentAngle","undefined","minimizeRotation","usePrevious","currentValue","useSimpleMovementAnimation","currentProps","position","previousProps","useSpring","from","to","next","a","config","duration","extend","OrbitControls","connector","connect","state","initialPosition","mapDimensions","gameSelectors","getMapDimensions","game","n","Math","max","useThree","camera","gl","controls","set","update","args","domElement","maxPolarAngle","PI","enablePan","CardboardBox","props","mesh","castShadow","receiveShadow","attach","color","GroundElevation","x","y","height","getRobotPosition","direction","directionToAngle","getRobotDirection","zRotation","rotation","TargetTile","tilesInfo","getTilesInfo","movableObjectsInfo","getMovableObjectsInfo","robotKey","getRobotKey","xSize","ySize","key","map","hasTarget","MyCanvas","Consumer","store","shadowMap","style","backgroundColor","top","left","process","intensity","Color","penumbra","decay","angle","shadow-mapSize-width","shadow-mapSize-height","Wrapper","styled","div","IconButton","Button","plain","margin","displayOnScreenControls","settingsSelectors","settings","dispatch","moveForward","gameActions","moveBackward","turnLeft","turnRight","keyMapping","onKeyPress","W","A","S","D","event","toUpperCase","call","window","addEventListener","removeEventListener","Box","align","icon","LinkUp","title","onClick","RotateLeft","LinkDown","RotateRight","DialogWrapper","nextLevel","levelsSelectors","getNextLevel","levels","goToLevel","level","push","goToLevelSelection","message","width","gap","pad","data-testid","label","getSelectedLevel","restart","levelsActions","selectLevel","Refresh","match","parseInt","params","isLevelCleared","isUnlocked","levelName","getLevelNames","Screen","Level"],"mappings":"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","file":"static/js/4.f0ce5fc3.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\n\n/**\n * Same as {@link useEffect}, but for side effects that should only happen once, when the component is first rendered.\n */\nfunction useEffectOnce(effect: React.EffectCallback) {\n  useEffect(effect, []);\n}\n\n\nexport default useEffectOnce;\n","import { useEffect, useRef } from 'react';\nimport { minimizeRotation } from '../../mechanics/directions';\n\n\n/**\n * Keeps track of an angle and minimizes the rotation needed to bring it to the current direction.\n *\n * @param currentDirection - an angle (in radians) indicating the current direction, within a circumference\n * @return the closest angle to the previous, which points in the same direction as {@param currentDirection}\n */\nfunction useMinimalRotation(currentDirection: number): number {\n  const ref = useRef<number>();\n  const previousAngle = ref.current;\n  const currentAngle = previousAngle === undefined ? currentDirection : minimizeRotation(previousAngle, currentDirection);\n  useEffect(() => {\n    ref.current = currentAngle;\n  });\n  return currentAngle;\n}\n\n\nexport default useMinimalRotation;\n","import { useEffect, useRef } from 'react';\nimport { Maybe } from '../types';\n\n\n/**\n * Keeps track of the value of a prop, last time the component was rendered.\n *\n * @return the previous value\n */\nfunction usePrevious<T>(currentValue: T): Maybe<T> {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = currentValue;\n  });\n  return ref.current;\n}\n\n\nexport default usePrevious;\n","import { SpringUpdateFn } from '@react-spring/core';\nimport { useSpring } from '@react-spring/three';\nimport { usePrevious } from './index';\n\n\ninterface SimpleMovementAnimationProps {\n  position: [number, number, number];\n  [prop: string]: any;\n}\n\n/**\n * Uses very simple animations to smoothly transition between states.\n */\nfunction useSimpleMovementAnimation<T extends SimpleMovementAnimationProps>(currentProps: T) {\n  const { position } = currentProps;\n  const previousProps = usePrevious(currentProps);\n\n  return useSpring<any>({\n    from: previousProps ?? currentProps,\n    to: async (next: SpringUpdateFn<T>) => {\n      // Handles falls\n      if (previousProps && position[2] < previousProps.position[2]) {\n\n        // moves horizontally\n        await next({\n          ...currentProps,\n          position: [position[0], position[1], previousProps.position[2]]\n        });\n\n        // falls\n        await next({\n          ...currentProps,\n          config: {\n            duration: 100\n          }\n        });\n        return;\n      }\n\n      // Handles simple movements (rotation and horizontal move)\n      await next(currentProps);\n    }\n  });\n}\n\n\nexport default useSimpleMovementAnimation;\n","import React, { useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { extend, useThree } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { gameSelectors, RootState } from '../../state';\nimport { useEffectOnce } from '../../utils/hooks';\n\n// False positive, when only the type is needed\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ReactThreeFiber } from 'react-three-fiber';\n\n\nextend({ OrbitControls });\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'orbitControls': ReactThreeFiber.Object3DNode<OrbitControls, typeof OrbitControls>;\n    }\n  }\n}\n\ninterface CameraControlsProps extends ConnectedProps<typeof connector> {\n}\n\nfunction CameraControls({ initialPosition }: CameraControlsProps) {\n  const { camera, gl } = useThree();\n  const controls = useRef<OrbitControls>();\n\n  useEffectOnce(() => {\n    if (initialPosition) {\n      camera.position.set(...initialPosition);\n      if (controls.current) {\n        controls.current.update();\n      }\n    }\n  });\n\n  return <orbitControls args={[camera, gl.domElement]} maxPolarAngle={Math.PI / 2} enablePan={false} ref={controls}/>;\n}\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    // TODO: find a proper way to determine a good initial camera position\n    initialPosition: (() => {\n      try {\n        const mapDimensions = gameSelectors.getMapDimensions(state.game);\n        const n = Math.max(3, Math.max(...mapDimensions) * 0.7);\n\n        return [n, n, n] as const;\n      } catch {\n      }\n      return undefined;\n    })()\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(CameraControls);\nexport { CameraControls };\n","import React from 'react';\nimport { a } from 'react-spring/three';\nimport { useSimpleMovementAnimation } from '../../utils/hooks';\n\n\ninterface CardboardBoxProps {\n  position: [number, number, number];\n}\n\nfunction CardboardBox({ position }: CardboardBoxProps) {\n  const props = useSimpleMovementAnimation({ position });\n\n  return (\n    <a.mesh {...props} castShadow={true} receiveShadow={true}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]}/>\n      <meshLambertMaterial attach=\"material\" color={0xaa8844}/>\n    </a.mesh>\n  );\n}\n\n\nexport default CardboardBox;\n","import React from 'react';\n\n\ninterface GroundElevationProps {\n  x: number;\n  y: number;\n  height: number;\n}\n\nfunction GroundElevation({ x, y, height }: GroundElevationProps) {\n  return (\n    <mesh position={[x, y, (1 + height) / 2]} castShadow={true} receiveShadow={true}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, height]}/>\n      <meshPhongMaterial attach=\"material\" color={0x555555}/>\n    </mesh>\n  );\n}\n\n\nexport default GroundElevation;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { a } from 'react-spring/three';\nimport { gameSelectors, RootState } from '../../state';\nimport { directionToAngle } from '../../mechanics/directions';\nimport { useMinimalRotation, useSimpleMovementAnimation } from '../../utils/hooks';\n\n\ninterface RobotProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Robot({ position, direction }: RobotProps) {\n  const zRotation = useMinimalRotation(direction);\n  const props = useSimpleMovementAnimation({\n    position,\n    rotation: [0, 0, zRotation]\n  });\n\n  return (\n    <a.mesh {...props} castShadow={true} receiveShadow={true}>\n      <coneBufferGeometry attach=\"geometry\" args={[0.5, 1, 10]}/>\n      <meshLambertMaterial attach=\"material\" color={0x6A0BFF}/>\n    </a.mesh>\n  );\n}\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    position: gameSelectors.getRobotPosition(state.game),\n    direction: directionToAngle(gameSelectors.getRobotDirection(state.game))\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(Robot);\nexport { Robot };\n","import React from 'react';\n\n\ninterface TargetTileProps {\n  x: number;\n  y: number;\n  height: number;\n}\n\nfunction TargetTile({ x, y, height }: TargetTileProps) {\n  return (\n    <mesh position={[x, y, height + .51]} receiveShadow={true}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]}/>\n      <meshLambertMaterial attach=\"material\" color={0x00FF00}/>\n    </mesh>\n  );\n}\n\n\nexport default TargetTile;\n","import React, { Fragment } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { gameSelectors, RootState } from '../../state';\nimport CardboardBox from './CardboardBox';\nimport GroundElevation from './GroundElevation';\nimport Robot from './Robot';\nimport TargetTile from './TargetTile';\n\n\ninterface MapProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Map({ mapDimensions, tilesInfo, movableObjectsInfo, robotKey }: MapProps) {\n  const [xSize, ySize] = mapDimensions;\n\n  return (\n    <group position={[(1 - xSize) / 2, (1 - ySize) / 2, -0.5]}>\n      <Robot key={robotKey}/>\n      {tilesInfo.map(({ x, y, height, hasTarget }) => (\n        <Fragment key={`${x}-${y}`}>\n          {height > 0 && <GroundElevation x={x} y={y} height={height}/>}\n          {hasTarget && <TargetTile x={x} y={y} height={height}/>}\n        </Fragment>\n      ))}\n      {movableObjectsInfo.map(({ key, position }) => (\n        <CardboardBox key={key} position={position}/>\n      ))}\n    </group>\n  );\n}\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    mapDimensions: gameSelectors.getMapDimensions(state.game),\n    tilesInfo: gameSelectors.getTilesInfo(state.game),\n    movableObjectsInfo: gameSelectors.getMovableObjectsInfo(state.game),\n    robotKey: gameSelectors.getRobotKey(state.game)\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(Map);\nexport { Map };\n","import React from 'react';\nimport { ReactReduxContext, Provider } from 'react-redux';\nimport { Canvas } from 'react-three-fiber';\nimport { AxesHelper } from 'react-three-fiber/components';\nimport { Color } from 'three';\nimport CameraControls from './CameraControls';\nimport Map from './Map';\n\n\nfunction MyCanvas() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => (\n        <Canvas shadowMap style={{ backgroundColor: 'black', height: '100%', position: 'absolute', top: 0, left: 0 }}>\n          <Provider store={store}>\n            <CameraControls/>\n            <group rotation={[-Math.PI / 2, 0, 0]}>\n              {process.env.NODE_ENV !== 'production' && <AxesHelper scale={[10, 10, 10]}/>}\n              <ambientLight intensity={0.3}/>\n              <spotLight\n                color={new Color('#fffda7')}\n                castShadow\n                intensity={0.7}\n                penumbra={1}\n                decay={1}\n                angle={Math.PI / 8}\n                position={[10, 10, 10]}\n                shadow-mapSize-width={2048}\n                shadow-mapSize-height={2048}\n              />\n              <Map/>\n            </group>\n          </Provider>\n        </Canvas>\n      )}\n    </ReactReduxContext.Consumer>\n  );\n}\n\n\nexport default MyCanvas;\n","import { Box, Button } from 'grommet';\nimport { LinkDown, LinkUp, RotateLeft, RotateRight } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { gameActions, settingsSelectors, RootState } from '../../../state';\nimport { useEffectOnce } from '../../../utils/hooks';\n\n\ninterface ControlsProps extends ConnectedProps<typeof connector> {\n}\n\nfunction GameControls({ displayOnScreenControls, moveForward, moveBackward, turnLeft, turnRight }: ControlsProps) {\n  const onKeyPress = createKeyPressHandler({\n    W: moveForward,\n    A: turnLeft,\n    S: moveBackward,\n    D: turnRight\n  });\n\n  useEffectOnce(() => {\n    window.addEventListener('keypress', onKeyPress);\n    return () => {\n      window.removeEventListener('keypress', onKeyPress);\n    };\n  });\n\n  if (displayOnScreenControls) {\n    return (\n      <Wrapper>\n        <Box align=\"center\">\n          <IconButton icon={<LinkUp/>} title=\"Move forward (W)\" onClick={moveForward}/>\n        </Box>\n        <Box direction=\"row\">\n          <IconButton icon={<RotateLeft/>} title=\"Turn left (A)\" onClick={turnLeft}/>\n          <IconButton icon={<LinkDown/>} title=\"Move backward (S)\" onClick={moveBackward}/>\n          <IconButton icon={<RotateRight/>} title=\"Turn right (D)\" onClick={turnRight}/>\n        </Box>\n      </Wrapper>\n    );\n  }\n  return null;\n}\n\nfunction createKeyPressHandler(keyMapping: { [key: string]: () => void }) {\n  return (event: KeyboardEvent) => {\n    const key = event.key.toUpperCase();\n\n    if (key in keyMapping) {\n      keyMapping[key].call(null);\n    }\n  };\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  bottom: .5rem;\n  right: .5rem;\n  z-index: 1000;\n`;\n\ninterface IconButtonProps {\n  icon: JSX.Element;\n  title: string;\n  onClick: () => void;\n}\n\nfunction IconButton(props: IconButtonProps) {\n  return <Button {...props} plain={false} margin=\"xxsmall\"/>;\n}\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    displayOnScreenControls: settingsSelectors.displayOnScreenControls(state.settings)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    moveForward: () => dispatch(gameActions.moveForward()),\n    moveBackward: () => dispatch(gameActions.moveBackward()),\n    turnLeft: () => dispatch(gameActions.turnLeft()),\n    turnRight: () => dispatch(gameActions.turnRight())\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(GameControls);\nexport { GameControls };\n","import { push } from 'connected-react-router';\nimport { Box, Button } from 'grommet';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { levelsSelectors, RootState } from '../../../state';\n\n\ninterface LevelClearedDialogProps extends ConnectedProps<typeof connector> {\n}\n\nfunction LevelClearedDialog({ nextLevel, goToLevel, goToLevelSelection }: LevelClearedDialogProps) {\n  const message = nextLevel === undefined ? 'Congratulations, you finished the game!' : 'Level Cleared';\n\n  return (\n    <DialogWrapper>\n      <Box width=\"medium\" gap=\"small\" align=\"stretch\" pad=\"small\">\n        <h1 data-testid=\"message\">{message}</h1>\n        {nextLevel !== undefined && <Button label=\"Go to next level\" onClick={() => goToLevel(nextLevel)}/>}\n        <Button label=\"Back to level selection\" onClick={goToLevelSelection}/>\n      </Box>\n    </DialogWrapper>\n  );\n}\n\nconst DialogWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1000;\n  background-color: rgba(0, 0, 0, 0.3);\n  border-radius: 1em;\n  h1 {\n    text-align: center;\n    line-height: 1.2em;\n  }\n`;\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    nextLevel: levelsSelectors.getNextLevel(state.levels)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    goToLevel: (level: number) => {\n      dispatch(push(`/level/${level}`))\n    },\n    goToLevelSelection: () => {\n      dispatch(push('/select-level'))\n    }\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(LevelClearedDialog);\nexport { LevelClearedDialog };\n","import { Button } from 'grommet';\nimport { Refresh } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport styled from 'styled-components';\nimport { levelsActions, levelsSelectors, RootState } from '../../../state';\n\n\ninterface RestartButtonProps extends ConnectedProps<typeof connector> {\n}\n\nfunction RestartButton({ level, restart }: RestartButtonProps) {\n  return (\n    <Wrapper>\n      <Button label=\"Restart\" icon={<Refresh/>} onClick={() => restart(level)}/>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: .5rem;\n  left: .5rem;\n  z-index: 1000;\n`;\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    level: levelsSelectors.getSelectedLevel(state.levels)!\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    restart: (level: number) => dispatch(levelsActions.selectLevel(level))\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(RestartButton);\nexport { RestartButton };\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Redirect, RouteComponentProps } from 'react-router';\nimport { getLevelNames } from '../../../levels';\nimport { gameSelectors, levelsSelectors, RootState } from '../../../state';\nimport Screen from '../../Screen';\nimport MyCanvas from '../../webgl/MyCanvas';\nimport GameControls from './GameControls';\nimport LevelClearedDialog from './LevelClearedDialog';\nimport RestartButton from './RestartButton';\n\n\ninterface MatchParams {\n  level: string;\n}\n\ninterface LevelProps extends ConnectedProps<typeof connector> {\n}\n\nfunction Level({ isLevelCleared, isUnlocked, levelName }: LevelProps) {\n  if (levelName === undefined || !isUnlocked) {\n    return <Redirect to=\"/select-level\"/>;\n  }\n  return (\n    <Screen title={levelName}>\n      <MyCanvas/>\n      {isLevelCleared ? (\n        <LevelClearedDialog/>\n      ) : (\n        <>\n          <GameControls/>\n          <RestartButton/>\n        </>\n      )}\n    </Screen>\n  );\n}\n\ninterface MatchParams {\n  level: string;\n}\n\nfunction mapStateToProps(state: RootState, { match }: RouteComponentProps<MatchParams>) {\n  const level = parseInt(match.params.level);\n\n  return {\n    isLevelCleared: gameSelectors.isLevelCleared(state.game),\n    isUnlocked: levelsSelectors.isUnlocked(state.levels, level),\n    levelName: getLevelNames()[level]\n  };\n}\n\nconst connector = connect(mapStateToProps);\n\n\nexport default connector(Level);\nexport { Level };\n","import Level from './Level';\n\nexport default Level;\n"],"sourceRoot":""}