{"version":3,"sources":["../node_modules/grommet-icons/es6/icons/Unlock.js","../node_modules/grommet-icons/es6/icons/Lock.js","components/screens/LevelSelection.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Unlock","props","React","createElement","StyledIcon","viewBox","a11yTitle","fill","stroke","strokeWidth","d","Lock","LevelSelection","isUnlocked","selectLevel","Screen","title","getLevelNames","map","levelName","level","Button","label","icon","onClick","disabled","connector","connect","state","levelsSelectors","levels","dispatch","push"],"mappings":"mKAAA,SAASA,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAIzS,IAAIS,EAAS,SAAgBC,GAClC,OAAOC,IAAMC,cAAcC,IAAYlB,EAAS,CAC9CmB,QAAS,YACTC,UAAW,UACVL,GAAQC,IAAMC,cAAc,OAAQ,CACrCI,KAAM,OACNC,OAAQ,OACRC,YAAa,IACbC,EAAG,sGCZP,SAASxB,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,IAAY,OAAOL,IAA2BS,MAAMC,KAAMR,WAIzS,IAAIoB,EAAO,SAAcV,GAC9B,OAAOC,IAAMC,cAAcC,IAAYlB,EAAS,CAC9CmB,QAAS,YACTC,UAAW,QACVL,GAAQC,IAAMC,cAAc,OAAQ,CACrCI,KAAM,OACNC,OAAQ,OACRC,YAAa,IACbC,EAAG,uG,gCCEP,SAASE,EAAT,GAA2E,IAAjDC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,YACpC,OACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,gBACXC,cAAgBC,KAAI,SAACC,EAAWC,GAAZ,OACnBP,EAAWO,GACP,kBAACC,EAAA,EAAD,CAAQ3B,IAAK0B,EAAOE,MAAOH,EAAWI,KAAM,kBAAC,EAAD,MAAWC,QAAS,kBAAMV,EAAYM,MAClF,kBAACC,EAAA,EAAD,CAAQ3B,IAAK0B,EAAOE,MAAOH,EAAWI,KAAM,kBAAC,EAAD,MAASE,UAAU,QApB3E,+CAsCA,IAAMC,EAAYC,aAZlB,SAAyBC,GACvB,MAAO,CACLf,WAAY,SAACO,GAAD,OAAmBS,IAAgBhB,WAAWe,EAAME,OAAQV,QAI5E,SAA4BW,GAC1B,MAAO,CACLjB,YAAa,SAACM,GAAD,OAAmBW,EAASC,YAAK,UAAD,OAAWZ,UAO7CM,YAAUd","file":"static/js/5.7ece04f2.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Unlock = function Unlock(props) {\n  return React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Unlock\"\n  }, props), React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M23,23 L23,11 L9,11 L9,23 L23,23 Z M14,17 L18,17 M11,11 L11,7 C11,4 11,1 6,1 C1,1 1,4 1,7 L1,11\"\n  }));\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Lock = function Lock(props) {\n  return React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Lock\"\n  }, props), React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M19,23 L19,11 L5,11 L5,23 L19,23 Z M12,15 L12,19 M17,11 L17,7 C17,4 17,1 12,1 C7,1 7,4 7,7 L7,11\"\n  }));\n};","import { push } from 'connected-react-router';\nimport { Button } from 'grommet';\nimport { Lock, Unlock } from 'grommet-icons';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getLevelNames } from '../../levels';\nimport { levelsSelectors, RootState } from '../../state';\nimport Screen from '../Screen';\n\n\ninterface LevelSelectionProps extends ConnectedProps<typeof connector> {\n}\n\nfunction LevelSelection({ isUnlocked, selectLevel }: LevelSelectionProps) {\n  return (\n    <Screen title=\"Select Level\">\n      {getLevelNames().map((levelName, level) => (\n        isUnlocked(level)\n          ? <Button key={level} label={levelName} icon={<Unlock/>} onClick={() => selectLevel(level)}/>\n          : <Button key={level} label={levelName} icon={<Lock/>} disabled={true}/>\n      ))}\n    </Screen>\n  );\n}\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    isUnlocked: (level: number) => levelsSelectors.isUnlocked(state.levels, level)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    selectLevel: (level: number) => dispatch(push(`/level/${level}`))\n  };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\n\nexport default connector(LevelSelection);\nexport { LevelSelection };\n"],"sourceRoot":""}